{
  "rn2022__animations__animations_other__others": [
    "Rive React Native",
    "skia for react native",
    "react-spring, very easy to use.",
    "Rive ",
    "Rive looks very interesting",
    "generally, animations is very hard to implement in react native. we want some easier solution like in for the web with css. ",
    "Rive\nHeard of it\nWould like to learn",
    "Babylonjs",
    "Tamagui supports animations. It has its own API but with pluggable animation drivers (reanimated etc.).",
    "react spring",
    "rive",
    "React Spring",
    "Tamagui üêê ",
    "react-native-svg",
    "Rive"
  ],
  "rn2022__resources__resources_communities__others": [
    "Apollo",
    "stackoverflow.com",
    "Poimandres\nRocketSeat (Brazil only)",
    "Some Discord servers such as ReactiFlux, Expo Developers, React Native Developers. Most ppl there are very junior though :/",
    "https://kommunity.com/subhub-turkey/about",
    "William Candillon, telegram chats",
    "rocket seat",
    "rocketseat",
    "Medium",
    "Infinite Red Community Discord. React Native News & Tips community on Twitter. ",
    "Not Just dev, react native community ",
    "Software mansion slack\nExpo discord\nCatalin Miron discord",
    "Infinite Red / Expo / Tanstack",
    "Twitter in general and the Reactiflux Discord server.",
    "Discord (Reactiflux)",
    "Bytes",
    "Reactiflux, callstack, codeitwrong server, expo, nothustdev, catalin miron dev, jarvis, react philippines ",
    "Callstack discord server",
    "Twitter, Reddit",
    "twitter.com and reddit.com",
    "reddit /react native ",
    "Expo developers Discord",
    "expo",
    "Expo Discord server. Nice way to get in touch with the core devs",
    "reactnativeconnection.slack.com",
    "Reactiflux",
    "this week in react",
    "Discord React Native",
    "Twitter",
    "React Native News & Tips (Twitter), Expo Developers (Discord), ",
    "theo's t3 discord server\nmatt's typescript discord server\ntrpc discord server",
    "telegram: https://t.me/reactnativesquad",
    "telegram https://t.me/reactnative_ru",
    "fb group",
    "Tamagui's Discord",
    "Expo, React Native Community",
    "twitter",
    "Slack. Reddit",
    "Expo forums, occasionally Expo Discord servers, Twitter",
    "no",
    "Twitter in general ",
    "Infinite red",
    "Expo discord ",
    "Infinite Red community slack, expo discord, ",
    "Infinite Red Community",
    "React Brasil",
    "Twitter ",
    "Twitter react native group ",
    "Discord, Reddit, Twitter, GitHub ",
    "None",
    "dev.to, discord",
    "Callstack & Expo's Discord Servers",
    "reddit (react-native)",
    "Notjust.dev",
    "InfiniteRed Community ",
    "twitter RN community, and there's a French Slack for RN users :) ",
    "/r/react-native",
    "Expo Discord",
    "RN Contributors Discord Server\nReact Native New Architecture Working Group\nReact Native Releases Working Group\nr/reactnative",
    "reactiflux, trpc discord, theo ping discord",
    "Slack, Discord",
    "infinite red",
    "Discord: Tamagui, vite-plugin-ssr, XState / Stately.\nReddit: reactjs, webdev, programming",
    "React Native Contributors",
    "React Native Newsletter",
    "Expo Discord, Ignite slack",
    "RN discord",
    "Reddit",
    "Women In Tech Slack",
    "React Native EU",
    "https://www.react-native.eu/\nhttps://appjs.co/",
    "https://apps.apple.com/us/app/react-native-components/id1333539401",
    "Storybook (discord community), ignite slack",
    "Expo discord and forum",
    "Expo discord",
    "Infinite Red Community Slack",
    "React native singapore group in telegram ",
    "Some discord channels"
  ],
  "rn2022__resources__resources_course__others": [
    "Epic React, IFC.js Advanced Course",
    "https://fullstackopen.com/en/part10",
    "stephen grider udemy course ",
    "Udemy\nFrontend masters",
    "https://app.rocketseat.com.br/",
    "software mention, IOS developer docs",
    "udemy",
    "UDemy",
    "https://www.rocketseat.com.br/",
    "twitter.com",
    "OpenClassrooms",
    "Launch rocket always shows up in SEO but the content is shit and often a regurgitation of the docs. I think good pieces on basics of react native like how it differs from web or how to handle storage are ripe for writing. ",
    "notjustdev, buildwithangga, prawito",
    "medium",
    "https://epicreact.dev/login/, Medium, Stackoverflow",
    "Udemy for courses, Twitter for some latest news or exciting things from various React Native contributors.",
    "Rocketseat ",
    "William Candillon",
    "https://swmansion.com/academy/workshops/",
    "I‚Äôve watched one in Udemy. Read a book on RN and I‚Äôm subscribed to William Candillon. They all failed in truly explaining the fundamentals and go deeper than react and react native sadly.",
    "Udemy platform ",
    "reddit, twitter",
    "CS50 mobile",
    "dev.to",
    "Twitter",
    "Packt Publishing, Coursera, Udemy, LinkedIn ",
    "reactnativeschool",
    "Mediums , react native community, github",
    "Teamtreehouse.com\nEgghead.io\nMedium.com\nYouTube.com",
    "Stack overflow. Twitter. Reddit",
    "youtube - udemy",
    "Udemy YouTube",
    "Notjust.dev\nAcademy.notjust.dev",
    "Udmey",
    "Udemy",
    "frontendmasters, egghead, udemy",
    "Udemy, Kent c Dodds ",
    "udemy, youtube",
    "RN docs, React docs, source code in github",
    "Platzi, udemy youtube",
    "ChatGpt",
    "Youtube",
    "https://reactjs.org, https://reactnative.dev, https://github.com/facebook/react-native, freeCodeCamp.org",
    "Udemy ",
    "https://www.udemy.com/course/the-complete-react-native-and-redux-course/learn/lecture/15706614?start=0#content",
    "Medium, udemy ",
    "academind",
    "React Native The Practical Guide - Academind",
    "https://thisweekinreact.com",
    "Frontend Masters, udemy",
    "YouTube, medium, mdn, stack overflow, twitter",
    "medium.com",
    "stackoverflow, github",
    "callstack",
    "egghead tanstack",
    "Epic React",
    "Udemy, youtube, start-react-native.dev",
    "egghead",
    "stackoverflow",
    "twitter",
    "rocketseat",
    "Twitter üê¶ ",
    "Callstack blog",
    "Stackoverflow, reddit ",
    "Stackoverflow\nReact/React-Native official docs",
    "Stack overflow, Reddit, Twitter, occasionally Youtube or other sites I find via a Google search",
    "Medium",
    "Medium.com",
    "Siso quester studios",
    "ThisWeekInReact.com",
    "Stackoverflow",
    "Reactjs New Doc (Beta), Medium blog posts etc.",
    "Start-React-Native, YouTube"
  ],
  "rn2022__resources__resources_people__others": [
    "Evan bacon, Jamon holmgren",
    "Michel Weststrate. Brilliant ideas overall. ",
    "Evan Bacon\nEric Vicenti \nMike Grabowski\nJanic Duplessis\nSatyajit Sahoo\nMo Gorhom\nEli White\nBrent Vatne\nJames Ide \nAdam Miskiewicz\nAnd many others",
    "William calidion, sonny sanga, clever programing ",
    "---",
    "Evan Bacon, Jamon Holmgren, Oscar Franco",
    "@mrousvay, @kelset, @cortinico, @jamonholmgren, @kadikraman, @p_syche, @millicode_, @ImRestrepo",
    "Diego Fernandes e Rodrigo Gon√ßalves - Rocketseat",
    "Beacon, Wiliam, Kelset, Callstack guys, Tomasz and Software Mansion team",
    "Sebastien Lorber, Evan Bacon",
    "William (Skia guy)",
    "Dan Abramov\nSebastian Lorber \nAlexandre Moureaux ",
    "Twitter. all the people from swm, meta, other big companies, William and the gang ",
    "Fernando Rojo, Evan Bacon, Theo Browne, Cedric van Putten",
    "Sebastien Lorber Newsletter",
    "Grafikart",
    "Jamon Holmgren, Robin Heinze, Mazen?",
    "Hola Mundo",
    "Catalin Miron, Vadim Savin, William Candillon, Traversy media, ",
    "William Candillon, Catalin Miron",
    "ricky, dan abeamov, callstack",
    "Satyajit Sahoo\n",
    "Vadim Savin ",
    "william candillon, t3dotgg",
    "Theo",
    "S√©bastien Lorber",
    "Ryan Carniato (on SolidJS and all things bleeding edge), Tanner Linsley (TanStack), Daishi Kato / dai-shi (Jotai, Zustand, Valtio etc.).",
    "Evan Bacon\nFernando Rojo",
    "vadim, prawito",
    "Theo, William Candillion ",
    "The expo guys; Brente, Bacon, the vision camera guy. The folks at software mansion, call stack, the guys at nativescript ",
    "Evan Bacon, tsapeta",
    "Evan Bacon, Willian Candillon, Tomasz Sapeta, Krzysztof Magiera, Marc Rousavy, Fernando Rojo",
    "William Candillon, Theo - t3.gg, Ben Awad, ThePrimeagen, Dan Abramov, Yishan",
    "William Candil",
    "Jamon Holmgren, Evan Bacon, anything SWM",
    "too many to list and they're all awesome :P",
    "Vadim Savin\nWilliam Candillon\nCatalin Miron",
    "Evan bacon",
    "Evan Bacon!",
    "https://twitter.com/swmansion https://twitter.com/mrousavy",
    "@Kelset",
    "Kent C Dodds (testing),  TK Dodo (react query), Evan Bacon (expo)",
    "Evan Bacon, William Candillon, Jared Palmer, Sebastian Lorber, Tanner Linsley, Kent C. Dodds",
    "Catalin Miron, William Candillon",
    "Mrosavy, theo, dan abramov",
    "Devaslife Takuya for inspiration.",
    "Jamon Holmgren, Evan Bacon, Brent Vatne, Kudo Chien",
    "https://twitter.com/wcandillon\nhttps://twitter.com/mrousavy",
    "Sebastien Lorber\nWilliam Candillon\nJack Harrington ",
    "https://twitter.com/Baconbrix\nhttps://twitter.com/dan_abramov",
    "Dan Abramov",
    "@mrousavy, @cedricvanputten, @Kelset, Evan Bacon, Dan Abramov",
    "dan_abramov, kudochien, mironcatalin, almouro, Evan Bacon, FernandoTheRojo, t3dotgg\nwcandillon, swmansion",
    "Krzysztof Magiera\nOscar Franco\nTomasz Sapeta\nEvan Bacon\nBrent Vatne\nMarc Rousavy\nSebastien Lorber\nLorenzo Sciandra",
    "William Candillion",
    "Evan Bacon, Fernando Rojo, Jack Herrington, Kent C. Dodds, Ben Awad, Tomasz Sapeta",
    "@t3dotgg",
    "Janic Duplessis",
    "Mrousavi - Gorhom - Nanorojo - Jay Meistrich -  Jamon Holmgren -  oblador -  Mathieu Acthernoene -  Szymon Kapa≈Ça -  Catalin Miron -  Lorenzo Sciandra",
    "Evan Bacon, Jamon Holmgren, Marc, Tomasz Sapeta, Krzysztof Magiera, William, Jacint Varga",
    "rocketseat",
    "Fernando Rojo\nWilliam Candillon\nMatt Pocock\nDavid \"Piano\" Khourshid (Xstate)",
    "WILLIAM CANDILON\nTHE WHOLE INFINITE RED CREW",
    "William Candillon <3 Seb. Lorber",
    "Wesbos",
    "Kent c dodds",
    "Infinity red team- all of them, margelo team",
    "all the people working on tan stack, poimandres, t3, zod / trpc, expo & swmansion",
    "Kent C. Dodds",
    "William Cadillon, Catalin Miron, Mike Grabowski, Marc Rousavy, Christian Falch, Jonny Burger",
    "Kudo Chien, Brent Vatne, tsapeta, James Ide, Cedric Van Putten",
    "stephen grider",
    "william candillion, marc rousavy, software mansion team, callstack team, expo team",
    "Kent c Dodds, Dan abramov",
    "Fernando Rojo",
    "@thymike",
    "Pretty much everyone from expo and software mansion that are active on Twitter also infinite red. ",
    "Fernando Rojo\nCatalin Miron",
    "Evan from expo",
    "Jamon Holmgren ",
    "Evan bacon, fernando rojo, william candilon, dan abramov",
    "Evan Bacon, Brent Vatne",
    "William Candillon, Enzo Manuel, Catalin Miron, Jamon Holmgren, Lorenzo Sciandra, Mark Erikson, Sebastien Lorber, Dan Abramov, Taylor Mcginnis",
    "Evan Bacon, Brent Vatne, Jamon Holmgren",
    "Evan Bacon\n",
    "Dan Abramov\nMatt Pocock",
    "jamon holmgren",
    "Jamon holmgren, theo browne, evan bacon, thomas s from expo, ",
    "William Candillon, Evan Bacon",
    "Reactiive, Vonovak, Mrousavy, alpha100 (creator of RN file access)",
    "Marc Rousavy",
    "mark, evan, brent, fernando rojo, akinn, oscar franco",
    "Krzysztof Magiera, Evan Bacon, Tomasz Sapeta, Satyaji Sahoo, William Candilion",
    "Tanner Linsley, Kent C Dodds, Evan Bacon, Matt Pocock, Khalil Stemmler",
    "Tomasz Sapeta, Evan Bacon, Fernando Rojo",
    "EveningKid, William Candillon",
    "Evan Becon\nBrent",
    "Evan Bacon\nMarc rousavy\nSebastien Lorber\nPaul henschel",
    "Dan Abramov, S√©bastien Lorber",
    "Evan Bacon, Fernando Rojo",
    "William, S√©bastien ",
    "ü•ì, Fernando Rojo",
    "evan Bacon\nBrent Vatne \nwilliam candillion \ncatalin miron \ntsapeta \nfernandoTheRojo\nmrousavy\ninkdrop\nalmouro\n",
    "Evan Bacon\nAndrei Calazans\nSebastien Lober",
    "Samet Mutevelli",
    "Maximilian Schwarzmuller",
    "KUDO CHEIN !!!, evan bacon, jamon holmgreen, satiyah sahoo, fernando rojo, william candillon, noobs from software mansion, whole expo and react-native teams",
    "Theo Browne (ping.gg) Mr. BLAZINGLY FAST‚Ñ¢ aka Primeagen, Rox codes, Dan Abramov",
    "Evan Bacon, Krzysztof Magiera, Dominik Dorfmeister, Tanner Linsley, Kent C. Dodds, ",
    "All of the expo and swm folks :)",
    "Jamon Holmgren",
    "William candillion",
    "william C. , kent c. dotts",
    "Evan Bacon, William Candilon, Diego Fernandes, Nando Rojo",
    "William Candillion, Marc Rousavy",
    "Kent C Dodds\nDan Abramov",
    "Fernando Rojo, Evan Bacon, Nate Wienert, Brent Vatne, Satyajit Sahoo, Micha≈Ç Pierzcha≈Ça, Tomasz Zawadzki, Tomasz Sapeta, Krzysztof Magiera\n\n\n",
    "Again so many. I know I can't remember them all. A few of them that came to my mind are as follows.\nSatyajit Sahoo, Marc (@mrousavy), Dominik (@TkDodo), Tanner Linsley, Daisi Kato, Dan Abramov and many many more.\n\nThanks to every contributor for their effort in the core React Native package and open source packages. ‚ô•Ô∏è",
    "William Candillon. Dan Abramov",
    "William Candillon",
    "Notjustdev, william candillion, theo t3",
    "Evan Bacon",
    "Kent C. Dodds, Dan Abramov",
    "Catalin Miron\nWilliam Cadillon",
    "Sebastien Lorber",
    "Kent C Dods",
    "Sebastian Lorber",
    "William Candillon, Marc Rousavy, Mark Erikson",
    "Kent C Dod / Dan Abramov / Sebastien Lorber / William Candillon / Brent Vatne / Jamon Holmgren "
  ],
  "rn2022__resources__resources_video__others": [
    "william C. ",
    "Can it be done in react native",
    "William Candillon, devaslife, Cory house, Dan abramov , Sebastien lorber,  Evan becon",
    "Brad Traversy, William Candillon, Fun Function",
    "Wiliam, Catalin Miron, notjustdev",
    "William Candillon, Catalin Miron, Dan's React Native Lab",
    "Codewith harry, smart programmer ,",
    "Fireship\nTheo Browne - t3.gg\nWilliam Candillon\nJonny Burger",
    "rocketseat",
    "William Candillon\nJack Harrington",
    "Korben\nAnd basically anything on YouTube that catch my eyes",
    "YouTube",
    "Hola Mundo",
    "William Candillon\n",
    "William candillon, catalin miron, evening kid ",
    "The Net Ninja",
    "William Candillon <3",
    "Can it be done in React Native, Theo (Ping)",
    "Theo Brown",
    "https://www.youtube.com/@wcandillon",
    "dan_abramov, mironcatalin, t3dotgg, wcandillon, swmansion, freeCodeCamp.org",
    "So many - Reactiive, Software Mansion, developedbyed, Fireship, Infinite Red, Matt Pocock, William Candillon, Theo - t3.gg, Pusher, Ben Awad, Learn with Jason, JsConf, Real World React and a lot more.",
    "Not Just dev",
    "William Candillon ",
    "Catalin Miron on YouTube",
    "youtube - benawad, unsureprogrammer, ",
    "Catalin miron,William candillon, evening kid, reactiive,",
    "William Candillon - https://www.youtube.com/channel/UC806fwFWpiLQV5y-qifzHnA",
    "william sc\nfreecodecamp",
    "Clever programmer",
    "Willian Candilon, Rocketseat",
    "Vadim Savin\nNotJustDev \nnotJust.dev",
    "William Candillon, Catalin Miron",
    "NotJust.dev, William Candilon, theo (ping.gg)",
    "Candillon",
    "William ",
    "rocket seat",
    "William Candillion",
    "Notjustdev, william candilon, jimmy cook, ben awad, sonny sangha, kenny gunderman, reactiive, catalin miron, ben awad, theo t3",
    "William Candillion, AppJs",
    "william candillon - not just dev - software mansion - pusher - Callstack engineers",
    "https://www.youtube.com/@rocketseat",
    "william candillon, t3dotgg, CodeAesthetic",
    "William Candillon\nCatalin Miron",
    "https://www.youtube.com/@CallstackEngineers\nhttps://www.youtube.com/@SoftwareMansion",
    "Jamon Holmgren, The Net Ninja",
    "eveningkid",
    "William Candillon, Theo - t3.gg, Ben Awad, ThePrimeagen, Infinite Red, Callstack",
    "William Candilion",
    "William Candillion, Marc Rousavy",
    "David Silvera (Youtube)",
    "William Cadillon ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è",
    "Catalin Miron\nWilliam Candillon\nevening kid",
    "Can it be done with react native\nMisscoding ",
    "William Candillion, Theo",
    "William Candillon / Can It Be Done in React Native",
    "https://youtube.com/@wcandillon\nhttps://youtube.com/@CatalinMironDev\nhttps://youtube.com/@eveningkid",
    "Catalin Miron, William Candillon",
    "@t3dotgg\n",
    "William candillon",
    "eveningkid ,reactiive and william candillion",
    "Channels of Jack Herrington, William Candillon, etc.",
    "WILLIAM CANDILON",
    "Jamon Holmgren on Twitch",
    "Theo, Matt Pocok, Fireship, Ben Awad",
    "William Candillon, Evan Bacon",
    "Firebase ",
    "can it be done in react native\nCatalin Miron\nByProgrammers\nreactiive",
    "William candillion, Catalin miron, evening kid, oscar franco, dans react native lab",
    "Willian Candillon, evening kid, Theo.gg, Software Mansion, Catalin Miron, Reactiive ",
    "William Candillon",
    "Theo, fireship",
    "Can it be done it react native?",
    "William Candillon, Software Mansion, Sonny Sangha",
    "Craftzdog, Candillion on YouTube ",
    "Rocketseat",
    "EveningKid, William Candillon",
    "catalin miro\nwilliam candillon",
    "evening kid, catalin miron",
    "Theo (t3.gg)",
    "Jason holgrem youtube live, Codeitwrong youtube channel",
    "Oscar Franco, William Candillon",
    "YouTube ",
    "Theo Browne",
    "eveningkid\nCatalin Miron\nSoftware Mansion\nWilliam Candillon",
    "random from YouTube ",
    "Jason / Software Mansion / William Candillon / Expo",
    "William Candilon",
    "RocketSeat, William Candillon, evening kid, devaslife, Reactiive",
    "Youtube",
    "None that I follow, but have watched some from William Candillon",
    "All on YouTube: Theo Browne / @t3dotgg, Fireship, Matt Pocock, devaslife",
    "Maximillian academind",
    "Max cadillon",
    "William, Catalin Miron",
    "\n",
    "William Can Dillon, Moron Catlin",
    "william candillon",
    "notjustdev, buildwithangga, prawito",
    "Jamon Holmgren",
    "William candillion",
    "https://youtube.com/@Blaiti",
    "theo ping.gg, primeagen",
    "https://www.youtube.com/@Reactiive",
    "fireship.io, The Net Ninja",
    "William candillon, Catalin miron, Reactive",
    "Midudev, HolaMundo,Goncy,Ben Award, William Candillon",
    "Callstack ",
    "William candillion ,Software mansion",
    "Brad Traversy, William Candillon, Academind, Colt Steele",
    "William Candillon, Catalin Miron, Reactiive",
    "RN EU conf",
    "Fireship",
    "William Candillon, Daniel Friyia, notjust.dev, catalin miron, oscar franco, fireship",
    "React and React Native needs an official Youtube channel! Please write this request.",
    "youtube.com/wcandillon",
    "William Candillon, Catalin Miron, Software Mansion, Appjs Conf, Callstack engineers, evening kid, Jimmy cook, Matt Pocock, Pradip Debnath, Reactiive",
    "fun fun function",
    "Catalin Miron\nWilliam Cadillon",
    "William scandilon",
    "candillon"
  ],
  "rn2022__opinions__opinions_advantages__others": [
    "Fast development across platforms!",
    "development time",
    "It uses Javascript and Expo",
    "It makes total sense to write for all platforms at once",
    "Cross platform deployments.",
    "Web Technology",
    "JS/TS is more approachable to beginners than native. React is, too. ",
    "For me the code is  more readable and understandable than flutter and the technologie like react and Typescript is more usefull to know than dart",
    "easy to start with basic react.js knowledge ",
    "Crossplatform, typescript",
    "It allows me to reuse my React.js code.",
    "Fast product delivery time, easy learning curve",
    "Fast, reliable, and easy too use",
    "Really native (unlike Flutter)\nCross platform\nEverybody knows React",
    "JS",
    "I like it",
    "Multiplatform, most of libs from Web works perfectly in RN.",
    "flexibility, universal, short delivery time",
    "It's using react - imo the best reactive UI library that is currently available in the industry. Fast refresh for UI which speed up development process.",
    "An all in one solution using the most currently most popular framework. What's not to love?",
    "JSX/TSX and TypeScript support",
    "Very familiar to a web react developer",
    "Shipping react native apps is quite fast.",
    "creating native apps with JS/TS",
    "Real cross-platform experience (mobile and web).",
    "js & ts and dx",
    "Web developers are comfortable in JavaScript/TypeScript. One codebase for multiple apps/channels",
    "learn once, write every where.",
    "The React model is really good for producing mobile apps!",
    "Good for iOS and Android. React make development easy. New architecture will be good. Ecosystem very huge and a lot of librairies and choices.",
    "Ecosystem\nReadability (old arch)",
    "speed of development, leveraging JS ecosystem",
    "Simple to learn and to use. \nMoving fastly and exciting news every week.",
    "Too easy to get started and come up with a hybrid app",
    "Way faster and cheaper to create an app, espacially for startups",
    "JS, multiplatform, ecosystem",
    "it seems there are more JS developers than iOS developers overall",
    "Ease of use, large community, rich package eco-system, development speed, react ecosystem",
    "typescript (javascript), normal performance ",
    "Code reusability, and experience with React is usable",
    "The code is clear, easy to write, easy to maintain. ",
    "Only technology with realistic universal UI sharing across platforms. Familiar UI paradigm. ",
    "the core RN project is actively maintained",
    "Easy to code\ncode sharing",
    "Multiplatform development, native views, large ecosystem ",
    "acceptable performance, code works at least (ios, android), fast market introduction",
    "JS/TS ecosystem",
    "cross-platform output",
    "Being able to use web dev skills to develop native apps",
    "pretty solid, lots of documentation, not too much limitation",
    "Quick iterations, community support",
    "2 apps for the price of 1.5 ",
    "Very convenient, very easy to get into but complex when you dig in the code. That's what I like.",
    "fast cross platform development specially accessible for people like me with previous React.JS experience",
    "Community, packages, tutorials, developer experience",
    "Code once deploy everywhere!",
    "Sharing React knowledge ",
    "Javascript is the main advantage",
    "Easiest cross platform, builds to native, access to JS/TS ecosystem.",
    "write once...",
    "Easy to make simple application ",
    "I have an existential crisis whenever I'm deploying to 1 platform, deploying to all of them or at minimum targeting all of them, is a welcome relief knowing it's minimum effort to target another device.",
    "Consistent cross-platform logic that renders native components (rather than canvas/webview UI).\nBeing able to leverage tons of battle-tested web tooling is also crucial for large-scale organizations.",
    "Obvi can build multiple apps with one codebase",
    "Multiplatform",
    "That I know that i can anytime go native if i need it. The speed and declarative way of developing is great as well. Expo makes RN thousands time more approachable ",
    "TS, support for many different platforms, community",
    "Easy to learn.\nA ReactJS dev will understand it quickly",
    "React is awesome. Write once for both platforms",
    "Somewhat seamless transition between RN and web, single code base for multiple platforms. JS.",
    "js",
    "One code base => multiple platforms.\nLarge community\n",
    "One codebase, easy to get started.",
    "Shipping fast",
    "That I can use React skills on mobile and web based on what project I‚Äôm working on. ",
    "Js/ts, control on native, more opportunities, easier to transition to web, ",
    "Capability to use some web technologies.",
    "Quick go to market for a simple app. ",
    "Fuck Android studio",
    "For now - nothing, except maybe CodePush",
    "Applying mental model and existing React knowledge.",
    "Large community and great documentation",
    "React developers can quickly pick up React Native",
    "Declarative UI, common codebase.",
    "One codebase for android and ios ",
    "Web compatibility: React, React Native Web, ARIA etc.",
    "Expo",
    "Easy to learn excellent community ",
    "Today is becoming faster and faster compared to native, performance is key ",
    "Easy to learn, saves time, uses JS/React which a lot of people already know, huge community and enthusiasm, more and more Platforms supported",
    "Clear, understandable, easy shift from react, a lot of 3rd part libraries ",
    "React devs",
    "Fast, cross-platform, powerful tools",
    "Native rendering instead of WebView. Cross-Platform with Web and Desktop",
    "It respects a host platform",
    "Single code repository and anything that JavaScript / node brings for development experience. ",
    "Time to market, PoC",
    "Write once run everywhere of course ",
    "As a fullstack javascript developer, it's just so great to be able to do everything in a single language, using common packages and tools (i.e. yarn).",
    "build on both ios and android relatively easy. It's more performant on ios by default. it has potential but needs more support from the core team. ",
    "OTA, JS is easy to learn and approach",
    "Write in one language. Use it everywhere!",
    "Cross-platform, react native web, access to all native APIs",
    "The fact that it‚Äôs native ",
    "Developer experience, code sharing",
    "Web developer friendly (with react)",
    "Low entry level, code sharing between platforms, speed and cost of development",
    "Its generally slower than a pure native app, consumes more memory, takes longer to load",
    "- Very quick to prototype\n- Probably best animation support\n- JavaScript\n- JSX\n- Hands down best non-toxic community",
    "Multi-platform, sharing code between web app",
    "feels like home",
    "Easy to get started\nOne codebase for multiple platforms ",
    "share code between platforms",
    "Functional components , Styling , Expo :)",
    "huge dev speed",
    "Good learning curve, best solution for mvp, react community is super active",
    "React-based model without the unreliability of SwiftUI",
    "Single code base for android and ios along with rich ecosystem.",
    "Community",
    "I love so much rn. Everybody knows them :) ",
    "It's the same as others types of coding. But it's way more FUN! And I feel the same as the ruby on rails community ‚Äîa lot of help between newcomers and experienced people.",
    "Native UI",
    "Easy to make high performance apps",
    "Combination of web-like approach to develop, but with near-native performance, behavior, and capabilities. Other solution tries to provide either webview solution, or more native solution, and React Native takes balance between these two worlds.",
    "One code base",
    "Typescript, Fast Refresh, Expo Go, Expo Prebuild, EAS",
    "fast development ",
    "Cross platform, big ecosystem",
    "Time to market, Fast reloading, Great community",
    "One codebase, default flex styling",
    "Ability to allow devs from different backgrounds to contribute to the codebase. Deploy to both ios and Android.",
    "Easy to learn and community support",
    "Writing ui is fast. I think I still prefer react to even the recent native declarative ui frameworks. Not having to implement the same app twice on each platform is obviously huge. ",
    "Faster iteration speed than native",
    "For a simple-mediate level app it‚Äôs amazing. So fast, and single code base ",
    "Web devs can output snazzy-looking UIs. ",
    "A small team can work on the web and mobile. Aldo backend devs can contribute more easily. Building a feature once for many platforms",
    "Cross platform\nReact knowledge",
    "Fasd bild and deployments, OTA, easy to work with",
    "Best hybrid solution",
    "I enjoy being able to make use of what I've learned so far with React. Native frameworks are catching up with fast reload and other developer experience stuff but I still am grateful for how easy it is to make separate components for your apps",
    "Fastest and easiest way to build a multi platform mobile app, hands down.",
    "Cheap, speed, js ecosystem,",
    "1. It uses React so it is easy to be picked up by frontend developers\n2. Runtime performance is adaquate even on low-mid range devices\n3. Big ecosystem of 3rd party libraries\n4. Typescript",
    "Native look and feel\nAccess to platform APIs\nUsing React.js",
    "1. Single codebase\n2. Coming from a web development background, I am able to build and release apps on stores\n3. Being a React developer, I did not have to learn much about how the code works\n4. Easy to style",
    "Hot reloading, cross platform. ",
    "Quite easy to learn, massive ecosystem. ",
    "Crossplatform and using native component",
    "#1 by far is the community. overlap with react, a well known framework, which helps web people be capable on mobile",
    "The community is the most important!\nIt just works better and is more stable I believe.",
    "Uses React, super fast, JSX, flex box, many plugins, full native functionality.",
    "It's just React\nCodesharing\nCodepush",
    "Best crossplatform solution",
    "Shared code for iOS/Android and even some core code is shared with web.",
    "Write truly native apps in JavaScript ",
    "same code for both ios and android",
    "A lot of crossplatform apis.",
    "Sharing, realizing stuff quickly with really good perf for multiple platforms",
    "Expo.",
    "Too many to list. Ability to iterate quickly on multiple platforms at once, ease of knowledge transfer for web developers, support from a world class team at Meta, and a more native look and feel.",
    "React allow web developers to easily transition and vice versa",
    "Performance ",
    "Learn once deploy everywhere ",
    "Easy to make apps with",
    "Tons of documentation, Videos, and StackOverflow articles",
    "CodePush\nReact Ecosystem's learning",
    "Easy to learn, cross platform",
    "Development experience",
    "One way of coding for Android and IOS, able to use React which is also what I use to build web apps, its big community with mature background.",
    "Using react and maturity and eco system",
    "Simplicity\n",
    "Very powerful to be able to use components that are native to the OS and also create new components composed of views. Apps are more alive with true native user interfaces compared to Flutter's 2D simulations of Android and iOS.",
    "OTA",
    "Rast and stable development",
    "If we look past all the fragmentation and libraries/setup/upgrade ( of the upgrade) pains it's simply the easiest way to make mobile apps. I used to work on native. No comparison.",
    "React based \nPerformant \nExpo\nWeb options",
    "Flexibility",
    "Can reuse coding skills of web development",
    "We use Javascript and React.",
    "Easy OTA update ecosystem",
    "We used to be a team of iOS and Android developers working in parallel. Now that we are using RN, there is less duplicated effort and I get to work more closely with devs that were working on a different platform before. ",
    "Ecosystem, Maturity and broad adoption ",
    "Speed, Cross-platform support, TypeScript support, ecosystem, new architecture",
    "easy ramp up for web/react developers to get into mobile",
    "Expo, OTA, Expo Go, EAS Build, EAS Submit, Expo Prebuild, Expo Modules API, Expo Router",
    "Fast and easy to use, tied in to a great ecosystem",
    "It's fast to write simple stuff.",
    "We keep the native link. I can still write native code and integrate and not be super mad. ",
    "The time to get an app up and running is a very good experience especially with Ignite or Expo",
    "Better DX, time to market and ease of use for a relatively performant app depending on project",
    "Uses the platform ",
    "Write once, run everwhere. Super easy to learn when you already know React",
    "React devs can develop apps! Also the community-built tools are quite advanced with things like react-query.",
    "- React/Typescript\n- Multi platform\n- Good native modules",
    "React knowledge\nNative UI elements\nJS ecosystem\nInvestment by large companies e.g. Shopify\nLove the community of people",
    "It's easy to catch up with its core features.",
    "Share code between platforms including ios , android, web . Help increase productivity and switch between web and mobile app development very easy",
    "\"Blazingly fast\" devlopement ",
    "Easy to learn and develop, fast growing for React JS developers, using JS and TS",
    "React.",
    "easy to use for frontend developers\ncross platforms\nnice user experience",
    "Cross platform ",
    "Cross-platform. It's the main reason I use it.",
    "Great growing community.\nMany solutions to many features and problems.",
    "speed to build interface",
    "Escape hatches, easy to mix with native code when needed, best cross-platform solution, flexibility",
    "Expo Expo Expo Expo Expo",
    "Javascript",
    "quick iterations and OTA updates",
    "Irs declaritve",
    "Easy to start, even easier with expo",
    "1. Easy UI because use JSX & React\n2. Easy adaptable for everyone that use typescript & javascript or from web development\n3. Over the air update\n4. Good performance by best practice approach\n5. Best community that always provide and contribute to this ecosystem especially Software Mansion & Expo",
    "I can use react",
    "Easy to start with\n\n a lot of built-in components like virtualized list which help a lot to build most of the things in 2sec\n\nhuge Js community ",
    "OTA updates\nFast development\n",
    "Fast iterations, super efficient development",
    "it uses react",
    "Real native apps with a single cross-platform codebase. In combination with react-native-skia for the more graphical needs, this feels like a perfect solution to me.",
    "Truly native\nWell known",
    "Friendly DX",
    "Development speed\nReact/JSX\nCross-platform",
    "Language (js/ts) + react ",
    "One codebase to maintain, delivering both on iOS and Android ",
    "crossplatform, easy programming language, nice performance and a lot of community work",
    "React (can make use of experience with Web dev. Can carry over to related things like React PDF, Email)\nDon't need a Mac for iOS dev if using Expo\nDon't need Android Studio if using Expo",
    "single code for Android and iOS, native performance in most cases, strong community",
    "Transfer of web dev skills, can share most code between platforms, good ecosystem of libs, expo making everything so much better!",
    "Simplicity\nCommunity\nExtensibility",
    "More resources and better performance ",
    "Multiplatform development",
    "multiplatform, great community, freedom to build native packages, constant improvement, react",
    "One codebase using ReactJS, TS, easy to start and build",
    "similar to web development, performance in all platforms, consistency",
    "React ecosystem and tooling, hot reload / code push, development speed",
    "Uses React, provides APIs similar to what you'd use on web, uses the platform",
    "- Code sharing with web thank‚Äôs to react-native-web\n- easy to adopt for a react web dev\n- also I think that RN is the best way to learn react\n- there is good bindings for rescript\n- good community",
    "Write once",
    "easy to use if u are react developer",
    "accessibility for developers",
    "Best developer experience for writing native mobile applications, aside from Flutter. Flutter has a slightly better experience in my opinion, mainly due to the language, Dart. Also harder to fall into performance pitfalls in Flutter.\n\nThat being said, I would never use Flutter to develop an app. Reasons being; Custom rendering engine, so not really native and the Dart/Flutter community and ecosystem is small and immature compared to TypeScript/React Native.",
    "You can build cross platform apps with a native UX in React. All react native skills transfer 1 to 1 with web dev. react libraries are usable in native. As a career choice react native is the best option right now",
    "Not writing things twice between Android & iOS",
    "Expo is awesome, multiple platforms",
    "One code base two platforms ‚ù§Ô∏è",
    "You can use any JS library. It's much easier to develop with. It's cross-platform.",
    "Using typescript for backend and frontend is great, possibility to switch between js and ts makes it easy for junior developers to start. React and JavaScript/aTypescript ecosystem is great",
    "Js community and great content creators",
    "very big community ",
    "Community performance if you know which libraries en other caveats it can be really performant en nice to wrjte",
    "Developer experience ",
    "That I know it very well compare to other solutions",
    "Build on multiple platforms",
    "Fast develoment",
    "JavaScript. Frontend, backend, and apps in JS. Native look and feel. ",
    "easy switch from web dev (react)",
    "Development speed. Uniform code for both Android and iOS platforms",
    "Small hurdle for React Web developers",
    "easy to maintain, fast result",
    "It's still basically React, so no need to relearn a new framework.",
    "- React\n- TypeScript\n- UI toolkit\n- fast feedback",
    "One code-base for multiple platforms. Also easy to switch between web and native",
    "Use the same react model to build mobile apps allow easier hiring and more code reuse",
    "Easy to pick up for a react dev. Good DX. I enjoy JS/TS and react's functional style. Multilplatform.",
    "Hot reload",
    "being able to target multiple platforms with a single codebase and share most of the code between them is very efficient",
    "React",
    "Typescript and react",
    "It's JavaScript so I enjoy it.\n\nWrite code for two platforms \n\nReduces cost\n\nFaster deploy times for both platforms ",
    "It‚Äôs a React app using JavaScript. ",
    "Ease, fast, strong community",
    "Performant, fast to deliver\nCommunity driven, the way meta handle open-source contributions",
    "code sharing, development experience",
    "Code sharing, especially if you use Styled-components",
    "quick build outs",
    "Multi-platform support with a huge ecosystem. Fairly easy to get something useful up and running.",
    "Easy to start",
    "Hybrid apps",
    "Javascript and React\nWrite once\nCommunity",
    "Reactive, one tech for iOS/Android, TypeScript,",
    "Development Speed",
    "Codepush completely",
    "Muti platform.",
    "Fast to build UI. Cross platform.",
    "1) easy to pick up\n2) 3rd party libraries offering rn alternatives and not only ios/android",
    "flexibility, typescript ecossistem, native result.",
    "React ecosystem",
    "Fast reload, onboarding web developers",
    "Mostly work on IOS and Android",
    "quick development for multi-platforms.",
    "JavaScript ",
    "Developer experience, iteration speed, OTA updates",
    "Rapid development for both iOS/Android (also web if needed), ability to easily integrate native APIs and views if needed ",
    "Almost 90% of code is compatible with both Android and iOS platform.",
    "Large community. Easy to move over if you know react. ",
    "The fastest way to write UIs on native. ",
    "Uses Javascript ",
    "it uses TS/JS ",
    "It's cross from native and let us write applications with the Web languages (javascript/css)"
  ],
  "rn2022__opinions__opinions_pain_points__others": [
    "The ecosystem is contaminated with low-quality packages.",
    "State management, low end smartphone performance (a lot of low end devices in third world countries)",
    "Flipper sucks\nAndroid performance is always worse than iOS\nMissing support from many third party/commercial tools",
    "deployment, performance, error handling (during builds)",
    "A lot of dependencies you need to include and support in order to have whole functionality",
    "Stability w/r/t Apple updates\nOpen source package quality",
    "Build times are long",
    "Package update, I'm currently waiting to update to RN0.71 due to package not compatible with it",
    "Testing on different environnements, ressources about good code architecture ",
    "Having to prevent rendering at all cost to minimize performance issues",
    "Native modules. Nativescript does it in a better way.",
    "Error reporting, lack of an official Channel like the flutter YouTube channel, routing, building ",
    "Integrate firebase.",
    "Styling (I working on a personal library for help me on that, but still a proof of concept https://github.com/Luffos/rxn-grife)\n\nViewport units without custom hooks (Also needed to create my own https://github.com/Luffos/rxn-units)\n\nWeb compatibility",
    "Shadows",
    "- Outdated stale libraries. \n- Random build errors after not having touched the project for a few months. Incredibly annoying. ",
    "Everything around it, such as building. I use Fastlane, which works well but I wish it was even easier. Something that should be fairly simple like changing package used for splashscreen can take days due to modules sometimes not working properly and Android vs iOS being completely different. Most tools and helpers get outdated.\n\nMore often than not, RN feels like a giant hack slapped onto iOS/Android.",
    "upgrading to new version, ",
    "Upgrading React Native in my project is a pain. It will take one or two whole days to complete.",
    "Error codes tend to be bad and misleading \nAlso performance is not the best",
    "Often a lot of breaking changes between dependencies",
    "Tracking Performance issue can be relatively complex\ne2e test is hard, Detox works but DX isn‚Äôt great",
    "Debugging ",
    "Depending on comunity packages for everything (if not using expo) since a lot of them are not mantained. The react native only ships the bare minimum (sometimes I think not even the minimum)",
    "Versioning (iOS, Android, JS + OTA)",
    "Build time, random build issues, very fragile with library versions ",
    "1.Porting or supporting of new features is slow like adoption of dynamic islands\n2. Lack of skilled react native devs because of high knowledge required for native programming and react native working ",
    "problems with re-rendering",
    "hard to setup CI/CD",
    "Troubles with android/ios when you have old libraries in project",
    "A lot of features are supported only by community libraries which very often are not supported any more. It's a problem especially after react-native introduced new architecture for native modules.",
    "Update to last version of RN",
    "Error messages, build time, package installation and linking",
    "Debugging, animations, deep link",
    "Performance optimizing ,and debugging iOS app on xcode ",
    "Too fragile, any little error can break everything and crash the app",
    "architecture change",
    "better dx in general, random build errors, worse performance on Android than iOS, android is not the superior platform :(",
    "environment setup",
    "2D games\nlack of built-in packages\nUnneeded re-renderings",
    "Lack of bundle splitting in over the air updates, versioning concerns, stylistic differences between mobile/web, monorepo tooling/hoisting",
    "stacktrace is hard to understand\nfirst party state debugger",
    "typescript integration and assets like svg are not out-of-the-box support.",
    "Keyboardavoding view,  environment variables",
    "Debugging, Tools",
    "Anything that hasn't got to do with the UI: Platform APIs are extremely barebones, leaving users to reach for community libraries that are often unmaintained.",
    "Mono repo support is lacking",
    "Boilerplate ",
    "Native integrations, Performance bottlenecks",
    "Flat list white screen",
    "Flipper‚Ä¶we need a better debugging tool. The amount of times flipper has caused issues during runtime or installing is a pain.\n\nUpgrading is still complicated for large projects.",
    "Component libraries",
    "updating RN and 3-party dependencies.\nrequired too many 3-party libraries for building complex UI, whereas in flutter most of them are available in flutter itself.  disk space of node_modules and RN platform taking huge space.",
    "Dependency management",
    "Popular modules deprecated or need help to maintain",
    "Better support of react-native-web and better universal platform support",
    "The relation between native modules, and ReactNative",
    "Installing librairies.\nMany librairies are strange to use not like the ReactJS ones.",
    "It's too easy for things to work in dev and crash/hang at the splash screen in prod.\nDebugging\nBuild problems caused by incompatible dependencies\nProblems inherited from React (data fetching, useEffect)\nImage processing/GL",
    "Upgrading libraries and version and adress specific platform UI differences",
    "Debugging is the top problem. Getting profiles of the Js runtime. Understanding native crashes. ",
    "Upgrading, especially 3rd party piba incompatibilities after almost each RN upgrade.",
    "App build/distribution pipelines (CI/CD)\nMultiple options rather than a single best practice (Touchable* vs Pressable, etc)\nDebugging effects",
    "Too many languages :) ",
    "Debug the layout, Run the code on an emulator or device",
    "Flipper not being compatible (anymore?) with use_frameworks!\n",
    "Debugging & when a random character in the render-segment breaks the app",
    "New version upgrades, maintaining custom native modules ",
    "Build Error",
    "i need very 3rd party library for basic components",
    "Animation & Navigation together and separately!!!",
    "build speed, deployment speed, testing",
    "Custom targets (share extensions etc) for iOS\n",
    "Debugging Hermes and Promises... ",
    "Every 6 months you have to revisit all your codes and upgrade to latest library versions in order to cope with future bugs. This is resource consuming and fires question marks in customers. ",
    "Initial setup on a new machine is a pain. There‚Äôs a lot of moving pieces so no constructive suggestions ",
    "new arch made rn upgrades hard",
    "Everything is pain for cli users. Expo is just making it way to somehow enter into my codebase as cli only and non expo owned libraries are often discontinued.",
    "Upgrading React Native version is a pain and not just for users, but maybe even more pain for library authors. It might be the cause of why so many libraries are not actively maintained.",
    "Keeping up the dependencies",
    "Styling in general, we need more features from CSS if possible.\nMore basic components provided by React Native teams that empowers both Android and iOS ecosystems.\nThe new architecture needs to be explained in a easier way, in the current state I find it so hard to learn.",
    "Keyboard avoiding inputs unification between ios and androids.\nMore documentation on making native modules.\nAbandoned not maintained libraries.",
    "Open source support for community driven plugins.",
    "keyboard handling",
    "new version updates, huge amount dead libraries",
    "State management. Dependencies.",
    "new architecture doesn't support backward old libraries",
    "New Arch, Fabric migration",
    "work with gestures ",
    "Accessibility",
    "Upgrading old Apps - Using new architecture",
    "The classic of having to keep up with changing modules that break. fearing to upgrade packages or sdks or underlying platforms so builds won't break. Spending quite some significant time to make build works instead of building features.",
    "No standard library/lacking standard library\nMany APIs are delivered by 3rd parties or by community open source projects\nDebugging",
    "Navigation and push notifications should be first party.",
    "Expo Router can't come fast enough!",
    "The keyboard handling. Very difficult to make a good UX with keyboard both on Android and iOS.",
    "mobile build pipelines",
    "Keyboard, Debugging",
    "complexity of integration of native modules",
    "sucky packages that are required",
    "Performance ",
    "Keyboard, unified navigation system for multiplatform, crashes on reload, upgrading, lack of good documentation for JSI ",
    "1. Upgrades between versions\n2. Styling system too different from CSS and limiting in many ways (e.g. gap)\n3. No easy free deployment method\n4. Production app sizes are too large compared to native apps\n5. Navigation feels too clunky compared to file based routing like Next.js\n6. Splash screen handling feels too clunky and would like option to easily load any resources (e.g. videos) on app startup",
    "It feels very hacky at times, and things don‚Äôt work for long if left alone. Overall feels fragile ",
    "Eco system catching up. I wish all the important libraries were taken care of paid people who constantly make sure it‚Äôs working correctly. Because depending on none paid people is unfair and unreliable ",
    "still android",
    "Bundler speeds, module system support, dedicated runtime, web feature parity",
    "Creating modules ",
    "Rendering basic components with a shared style still doesn't always give you the same output across iOS and Android in some cases.\n\nKeyboards and inputs (KeyboardAvoidingView)\n\nNavigation is still more complex than it should be for me personally but I think Expo Router is a mental model I can get behind.\n\nMy biggest issue is uncertainty with what packages or libraries are meant to run in expo. Before, it either worked with Expo or it didn't, and now with turbo modules, fabric, JSI, Skia it's very unclear to me what I can slap into an Expo go app vs what I need to build first. A lot of the documentation assumes you've been consistently following React Native along this whole journey and \"just following the documentation\" isn't enough for beginners who come from an environment where they usually just npm install something or look it up under MDN.",
    "The whole development experience is pain",
    "Upgrading react native versions takes too much time that is hard to fit in to the product timeline",
    "- poorly maintained packages that are providing well used features\n- still some performance bottlenecks",
    "Performance",
    "Lack of documentation for the new architecture",
    "Upgrading",
    "Upgrading of xcode project is hard. Performance in lists and animations is hard to get to native standard but feels like its getting a lot better lately (reanimated, f√∂ashlist, wishlist etc).",
    "Upgrading react Versions",
    "Upgrading react native, some unclear error messages ",
    "Animation, speed",
    "Building and submitting apps especially on Windows",
    "debugging, styling for different platforms,  better documentation  for better practices in rn",
    "Some npm packages requires to modify android and ios files, which most of the time is messed and errors cant be understood by a js/ ts developer.",
    "Implementing new native modules",
    "Native dependencies before new arch",
    "You have to learn natives someday",
    "Dealing with native code, Xcode, debugging tools.",
    "Tend to fail to build",
    "Debugging experience is awful. ",
    "Debugging experience and hot reload (still kills the app in the simulator whenever I introduce most changes)",
    "Keep in touch with versioning upgrades\nDebugging (JSI / JSC mess)\nOnly using iOS simulator cause Android one sucks\nTesting on real devices isn't convenient without Expo",
    "The debug tools with flipper have great potentiel but are often full of bugs, to install them or to use them.\nI love React in itself, but I feel for beginners it's very hard to master because some APIs are quite complex (useEffect for example)",
    "Upgrading apps can be a challenge, the new architecture is going to be a tricky migration to get old dependencies migrated. ",
    "Different supports for different mobile platforms - needs to handle platforms separately sometimes",
    "Random build issues that require cache clearing etc‚Ä¶ would prefer if core RN focused on making sure everything builds all the time.\n\nMetro doesn‚Äôt support symbolic links which makes developing packages really annoying - why metro?",
    "Lots of libs are not well maintained \nGap between js and native \n\n",
    "Updating version of the app",
    "RN is not Multithreaded ",
    "Steep learning curve ",
    "Upgrade, out of date libraries, new architecture confusion, Hermes not supporting async generators, the web",
    "Less platform apis, need to be dependent on other library.",
    "Setting up the envirnoment for development",
    "Dropping support for older platform SDKs too quickly, not maintaining prior releases for long enough ",
    "Too many way to do the same stuff, and too many packages for the same purpose. Just the list of each section of this survey show it! It makes it hard for new developers to choose, and jump into, and some choice can be hard to make / hard to maintain and switch in the long term.",
    "defragment/obsolete react native modules. Some of them are out of date and it has no guarantee that someone will update/fix them.",
    "Lists, Lists, Lists",
    "Upgrading bare apps\nDebugging tools ",
    "Still too many errors based on XCode Android studio setup ",
    "too buggy, no native ui components, lot of 3rd party libraries are incompitable. pain to debug and very bad experience.",
    "Native 3rd party dependency integration.\nRed error screen doesn't help pin pointing issue.",
    "Environment setup can be tricky sometimes and hard to debug",
    "separation of many core modules to community ones, many modules are obsolete, new architecture not supported by many and will take time if not forever, many configuration pains that slow down dramatically the production, switching to newer versions is also very bloated. it needs to be something smoother moving forward as we see decline in popularity too. ",
    "Animations and native code errors, performance and many features not out of the box like react navigation, screens, camera, image picker, geolocation, call features, shadows not working as expected f.e. android shadows",
    "Dealing with native errors can be tedious. Feels like the code is held together by a string sometimes",
    "Accessing native API. \nDo I need to learn C++ for TurboModules? Is JSI simple enough to get started with?",
    "Speed, debugging",
    "Debugging react native apps.",
    "the latest updates have been quite fragile",
    "Upgrade to new versions, compatibility between platforms, some old feature that is not  implemented (like yoga feature for styling or theses stuff)",
    "1. There's no responsive scaling stylesheet based on screen size for react native that active maintained right now\n2. Working with splash screen is still pain in android for example with expo-splash-screen, with \"native\" type splash screen it's just can show logo in middle, and can't show stretching image or consist 2/3 images in one splash screen opening in runtime, for this solution can use windowBackground to transparent, but it make the app not seamless when opened\n3. Some people say that performance in react native is worse, but i think it's can be reduced by using hermes, and use best practice, i hope generally by default it's change more fast and same like native\n4. Write native modules & native view",
    "Upgrades are painful, desktop os modules are thin",
    "Native components\nStyling\nDeployment",
    "Styling",
    "Upgrades and multiple apps from one codebase. Should be configurable, similar to expo‚Ä¶",
    "Build times and build errors. Difficulty of setting up a good mono repo for next js and expo. Navigating over all sucks. ",
    "upgrading and cicd pipelines /automated deploy and testing",
    "Styling is harder in RN than any alternative.",
    "It's often so behind native and web in so many ways. Want to do something as simple as show a menu that feels native? That requires spending weeks building and maintaining a library of your own. UI primitives are very behind and are all community-maintained.\n\n",
    "Dev tools integration (devugging)",
    "Responsive ",
    "Deploy",
    "upgrading and performance on lower end Android devices. difficult to pinpoint causes of crashes on obscure devices and fix them as a professional developer",
    "Upgrading is a mess, apps sometimes stop working for no reason other than recompiling (e.g. react-native-windows is horrible with path name lengths)",
    "upgrading react-native on complex app structures",
    "Package installation (obsolete versions, incompatibilities)",
    "Styles, animation, debug, platform api",
    "Native modules is still hard",
    "keyborad, updating version",
    "Slow bundler, missing support for PNPM",
    "The new architecture delegated a lot of work to the library maintainers. I think it should have been the other way around. There are too many abandoned libraries out there and some of them would have been usable. \nIt is pretty impossible to opt-in to the new architecture due to the lack of support from the library maintainers.\nC++ wrappers are also PITA. Expo's approach seems promising and I think react-native also needs the same.",
    "ecosystem changing way too fast and it's chaotic. No time to learn new features and no idea which features to learn and how to get information about news",
    "Coming back to an unchanged code, being unable to get it started again",
    "The need for external dependencies to implement basic things",
    "Version upgrading",
    "3rd party libraries and native integration lags behind the RN core ecosystem",
    "Upgrading is the main one. Recently spent 3 days on upgrading only to give up and delete the branch. ",
    "Platform specifics ( UI) .\nHaving to see xcode and Gradle to build . Thanks to Expo , EAS Build and submit , i didn't even have to touch a MAC",
    "TESTING!!",
    "Having to be very conscious of performance. Generally it‚Äôs fine but it comes up occasionally ",
    "The new architecture is not stable at all",
    "RTL and internationalization issues\nAsset management",
    "Native widgets on iOS and Android. Home screen. Lock screen.",
    "Upgrades, visual effects and animations",
    "KeyBoardAvoindingView\nIt is very difficult to make a responsive ui\n",
    "Single threaded nature of JS and RN is a big bottleneck. Official support to something similar to WebWorkers would be great. Inability to create native CPU thread is a bummer. react-native-multithreading does provide somewhat good functionality but you can't run ANY method there.",
    "upgrade",
    "Writing custom native views",
    "Slow. Nothing \"native\" about it. Super unstable third-party library dependency system; things always breaking or becoming obsolete. (A result of too much dependency on third-party libs to fill in the gaps.) Creating components that look good is painful. Upgrade process for React Native is manual and error-prone.",
    "Hard to update version, new versions break many community libraries so you have to wait for them to be stable in order to update the rn version",
    "Keyboard avoiding view\nNew Architecture breaking changes\n",
    "What happened to hermes? \nLibrary authors drop RN version support easily. \n",
    "Updates our app to new versions.",
    "Inconsistencies in builds, installing a new dependency and app starts crashing ",
    "RN Version upgrades on large code based are impossible ",
    "Android debugging",
    "The process to upgrade especially with other supporting libraries ",
    "debugging errors, missing in-built packages, painful updates",
    "Debugging, lack of bundled native and well-optimized packages, e.g. file system, file-system routing, SQLite etc.",
    "Discontinued Community library,\nUI Library not fast enough",
    "Debugging, Keyboard Avoiding, bad error messages, Android Emulator performance ",
    "3rd party libraries are unstable and buggy",
    "I just want navigation by URL without having to bother with specifying nested stacks and whatnot.",
    "A lot of different ways to do things, it can be hard for a newcomer to choose the right ones. Also for library developers, that means a lot of platforms to potentially support (expo-modules, new and old arch)",
    "Using RN, Expo, and Next.js together",
    "Debugging",
    "New architecture still not possible due to it requiring 3rd party libraries to support it",
    "Keyboard avoiding view",
    "performance",
    "Updating to new versions of RN. Crashes / Bugs because of using multiple libraries, memory footprint.",
    "Spending time to find a community/external library for components",
    "Feels like the react native core team is not super helpful :(, Third party abandoned libraries. No official support from the core team.",
    "building, cross platform, ios native modules, pods in ios ecosystem",
    "Bloat in core APIs that could be pushed onto community libraries. Sticky headers in scrollviews, KeyboardAvoidingView, FlatList etc.",
    "making small projects is easy, making complex & optimised apps is way harder than it should be.\nsometimes it feels like we are fighting react & and react native themselves instead of focusing on the app's requirements",
    "Updates, new architecture",
    "Build tools, difficulty of writing native code using Swift & Kotlin",
    "RN Updates, outdated packages",
    "Performance on low end devices, outside any mobile hardware (tv, etc.)",
    "Incompatibility of libraries, react native version and device os version. Can be a mess sometimes.",
    "Debugging, Profiling",
    "version upgrade",
    "One of the pain points for me was video support. RN doesn't provide something ready so I had to patch some libraries together to make it work. And it's still not ideal because react-native-video is in alpha and when I first started the project, jcenter was being deprecated and it cause a bunch of issues with one of its dependencies too",
    "Poor performance in edge cases",
    "Takes a lot of effort to build truly modern, native-feeling UI (compared to, say, SwiftUI)",
    "version upgrades are error prone",
    "Update version is a pain in the neck",
    "Bad xcode errors",
    "New architecture is a pain to adopt (no compat layer)\nWeb should be an official target",
    "no ready-to-use components like a flutter, need developer support like a flutter (for beginners docs, components, standards, startup templates)",
    "Testing",
    "The debugging experience is very frustrating (useless stack traces). The expo vs vanilla RN divide can be tough to navigate. EAS is on the right track to improve this, but it's in its early stages and still has a lot of rough edges. \n\nAlso relying on community packages which often go stale or are abandoned. ",
    "Getting updates to cooperate is a pain in the ass",
    "I feel like the documentation on custom modules is severely lacking, especially for those who don't know much about the native side of RN, it was probably the most complicated thing to work on during my time with react-native. I hope clearer instructions will be made available with the new Turbo Modules system.",
    "Builds",
    "Web",
    "Changes like the new arch and Fabric are right. It‚Äôs just that the APIs for building stuff that support them is kind of terrible. Library maintainers are being pushed hard as is. They really don‚Äôt want to deal with all the complex handling of new arch / old arch (This was why i switched to writing modules in expo modules. I don‚Äôt care about the complexity, i just want to make native modules with modern languages that people can use, not debug Java and ObjC and some terrible cpp code for every architecture)",
    "Using Plain RN updating is still very painful, thats why Expo is a good first entry point for most RN developer or aspiring devlopers. The update process in most companies which I took over work were done like this: \"Creating new RN project copy code over and reintegrate settings for iOS and android\". Which was less painful then running major upgrade version via the RN-upgrade-tool.",
    "Updates, environment setup, E2E tests setup",
    "upgrading",
    "Outdated and unmaintained packages and packages of poor quality",
    "Native module integrations",
    "Add new package or update version . Building time is also a pain point",
    "Too much choice paralysis and so many deprecated community libraries. I feel like it takes a senior to get things right and stable. I never really feel safe. I'm an ex computer engineer and have been programming in js for 15 years now and still feel that even though RN is the best way to do mobile it's overly fragmented for even basic stuff.",
    "Styling,navigation",
    "1) Updating to new versions\n2) Description of new archicture and technologies like fiber,flipper &hermes",
    "Upgrades",
    "developing for both expo and react native",
    "Debugging is a mess and there are hardly any good resources on memory profiling and debugging. You cannot properly debug memory issues in dev mode because of the extra stuff added for Dev mode, but you also cannot debug in release mode properly and it is very cumbersome. There needs to be a lot more documentation and thought put into that side of things. ",
    "Patching third party libraries\nUpgrading non-expo project\nNew architecture is a breaking change",
    "metro bundler does not work well in monorepos",
    "Profiling and debugging",
    "Migration to new architecture",
    "Debugging!",
    "1. Integration of Navigation\n2. Integration of Firebase\n3. Build size",
    "Migration to the new architecture, a well defined route in upgrading libraries to the new architecture ",
    "there are always problems with third party packages + testing",
    "We need one inhouse ui framework like Material design for all components. Disappointing installing 30 modules for the app.",
    "Typescript can be a bit troublesome (although I read there were updates coming in .71)\nBroken pods and build issues can be a huge pain",
    "Performance as compared to Flutter",
    "Use_frameworks",
    "default FlatList perf\n",
    "-  A lot of configuration/boilerplate.\n- Styling\n- Debugging",
    "Upgrades, Weird SoLoader crashes in some samsung devices. This happens suddenly -- maybe due to Samsung OEM updates",
    "Upgrading app",
    "Debugging, documentation (specially around new architecture), environment setup, upgrading",
    "there are too many third-party libraries that would be hard to find the right one.\nnew arch is hard for libary maintainers to upgrade.",
    "Animations\nuseEffect when you don't know how to use it well",
    "No resources or examples of native use. It‚Äôs something we would need to at least understand but there‚Äôs so little about this and it‚Äôs hard to keep up to date (for me) with React and React Native changes",
    "Debugging with Flipper is not great. Flatlist performance. Android Emulators.",
    "minor changes, breaking builds, hard debugging",
    "Migration to new versions.",
    "Difficulty getting started, dependency issues, having to use xcode/android studio",
    "Performance issues are easy to introduce and hard to debug",
    "Keyboard following input ",
    "The upgrade process (RN 0.69 > RN 0.71) is sometimes a real pain",
    "Profiling, Improving performance, Documentation of common mistakes to avoid performance bottlenecks.",
    "Building without expo\nUnimplemented JS standard libs (url, intl, promise utils...)",
    "Updating RN version. Too easy to mess stuff up when updating native files",
    "That Flow is preferred over TypeScript, paused development of Yoga",
    "Performance on low-end Android devices is terrible.\nStyling is still a pain, specially when trying to build for the web in the same codebase. No solution available right now is ideal for both scenarios.",
    "JS thread block when we do fetch data from backend",
    "navigation, styling",
    "I plan to upgrade one of my react-native plugins to the new architecture, but I feel that I have so many to learn (not the C++ language, but the architecture itself)",
    "new architecture",
    "iOS pods",
    "Performance\nFinding featues only available for one platform like maintainScrollposition is only available in ios. And there are many things like this.\nAlso during development there is that some code works good on ios but i need to change it to make work on android, here talking about javascript code. I know it sounds weird but have faced this mainly in how we apply styles.",
    "unmaintained third party libraries, but this is an issue with all JS/typescript ecosystem",
    "Calling hooks conditionally",
    "Apple's App Store & Google's Play Store",
    "We need more powerful styling tools, react native styles feels years behind of what is possible on web with css",
    "New architecture adoption is going to be a major pain at current state. Fortunately the team notices the challenges and does amazing ground work at streamlining it",
    "Setup without expo is a pain, xcode sucks, updating is a pain, aligning team laptop settings etc is horrible, iOS pod management and download process is extremely slow",
    "Keyboard avoid view",
    "Conflicting documentation and obsolete help guides all over the web due to rapid breaking changes across versions.\n\nApps appear to \"break on the shelf\" due to breaking changes by minor version updates.\n\nTerrible ecosystem where many packages become wildly popular and then get abandoned by authors and the community.  Likely due to the rapid breaking changes mentioned above.\n\nTedious and inconsistent methods for bringing new packages into a project.  Spend way too much time tinkering around with Kotlin and XCode voodoo just to get simple things working.",
    "No clear standard for architecting medium to large scale app. Native development has some standards like MVVM, MVC etc",
    "Reparenting - would be great to have that.",
    "- Build time (EAS Build is improving things)\n- Frequent platform changes break third-party libraries and render them unusable very quickly. I'm afraid to use anything not maintained by Expo.",
    "commercial components like syncfusion or kendo UI ",
    "1. WIth new archtecture is released, i'm still hesitant to upgrade my project because i don't know if all my dependencies are updated.\n2. Animation Api not easy to use\n3. Styling need more features",
    "Some basic things like buttons, lists, checkbox, radiobutton, image lack in quality of these components and bad performance",
    "Debugging, keyboard handling , textinput",
    "Documentation",
    "Optimizing animations and navigation ",
    "CONSTANT EVOLUTION OF EVERYTHING, \nPERFORMANCE IS STILL A BOTTLENECK FOR SOME THINGS",
    "Everything that expo solves. React native without expo is just a pain",
    "Unstable libraries not in sync with newest react native",
    "Custom native modules\nbuilds",
    "debugging are really hard, at least Flipper always stop working besides it is too slow.\nnative styling could be more simpler.\nupgrade RN versions is confusing.\nsetup tests, at least with jest and typescript, is confusing too.\nbuild to desktop could be more simpler.",
    "everything",
    "By far and in comparison to flutter project is the time to update an ¬´¬†old¬†¬ª project to recent versions.",
    "Need more example in documents over complex things",
    "Why are we still working with native code. Upgrades",
    "RN is awesome for small projects and MVPs, but when business requirements are growing, most people overlook the moment when react-native app should be rewritten with to native.",
    "upgrades ",
    "Xcode when deploying and running build ",
    "Lack of support for in app purchases",
    "Debugging, monorepo support, building",
    "code quality and maintainance of 3rd party packages",
    "Debugging sucks",
    "Global state management, debugging, few react native components compared to other frameworks, and outdated libraries",
    "Debugging, unmaintained important libraries (lean core), rendering differences between iOS and android (hope this will be fixed with fabric)",
    "It‚Äôs not as easy to move quickly in RN. For web for example, there are very complete UI libraries (Mantine) and stacks (T3 stack) that feel ahead of the RN community. ",
    "SVG",
    "the need to write some module in native language",
    "migration is soooüí©",
    "Buildtime",
    "Deployment",
    "Slow and weak support from Meta",
    "When will the full migration to the new architecture be \"complete\". All the packages needs to be updated, this makes it very hard to update some older application with legacy components.",
    "Unmaintained libraries e.g image. Fabric not ready",
    "Debugging experience not as good as web (including for react native web), many modules require platform-specific config. ",
    "debug",
    "Navigation, styling ",
    "Flex gap still not released, metro outdated (es module support), some native plugins out of date.",
    "Missing commonly used libraries & components out of the box ",
    "Nonreliable Debugging",
    "Dependency hell. Upgrading rn versions (due to dependencies). Lots of open source libraries lack backing and become outdated. It feels like the open source ecosystem requires more native devs but lacks them because it's more appealing to js devs.",
    "Updates\nquality of dependencies\nJest & test with typescript often break",
    "js bridge",
    "Builds suddenly failing. Only fix is clear mode modules, build dirs etc. ",
    "Platform APIs diffs ",
    "I need more wrapped ecosystem  ( like expo classic). not want complex system like EAS",
    "Debugging in vscode still flakey",
    "Rtl issues",
    "I still few a bit annoyed about issues with performance in React Native. I feel like we still have room for growth in this direction.",
    "Keyboard, TextInputs, List performance (even though FlashList helped BIG TIME, but it's not perfect yet). Video and image performance in recyclers. Generally everything that needs recycling is very hacky.",
    "Dying and unmaintained libraries.",
    "Debugging!!!",
    "Upgrading, Android performance",
    "The documentation is not self explanatory like beta react native documentation ",
    "Native modules integration",
    "Complex UIs (shadows on android, complex charts, complex animations)",
    "I don't have a great debugging solution in my current project. The RN debugger has a lot of crashes and bugs. I'm mostly using console logs right now.",
    "Performance on Android sucks",
    "Styling, fonts",
    "Managing Keyboards",
    "New architecture docs hard to follow.\nSwift / Kotlin should be default.\n",
    "Generally I feel that React itself has moved somewhat in the wrong direction. Hooks don't hold up well in many complex use cases. Strict mode adds pain for very little benefit. There's a lack of ability to clearly and succinctly express what I want my code to do.",
    "Not many open source libraries",
    "Rendering speed. Native Module development. Crash management.",
    "Debugging, many unmaintained libs, Metro",
    "updates!!!",
    "There's no clear winner amongst debugging and profiling tools.\nIf you don't pay tackle performance, it will eventually tackle you.",
    "Complexity",
    "Updating React Native apps and M1's are still not supported on cocoapod. Android feels like a second class citizen.",
    "unable to stand at one main version and a lot of issues happen when setup project and also lot of native configuration is needed ",
    "Debugging. Profiling. Upgrades.",
    "Upgrade process",
    "Lacking Bluetooth support",
    "Navigation, project structrure, standardisation/best practices, performance",
    "Upgrading React Native when a new version drops in. Rest I can live with.",
    "Migrating to newer version of react native.",
    "Cryptic crashes, slow performance on Android, abandoned react native libs with poor support ",
    "Debugging, third party support dependecy, deprecated core native API modules, crash and bugs, version management ",
    "Unexplainable error builds, lack of tools too much reliance on community, ",
    "responsiveness. I mean media-query like native equivalent.",
    "Debugging - particularly performance, but also observing errors in production. ",
    "Upgrading to a newer version of react native, especially for old and big projects ",
    "Web isn‚Äôt supported that well. No official opinionated solutions, for example too many packages doing the same thing (state management, navigation, etc).",
    "Monorepos",
    "Having to work with the native layer at any level.",
    "The navigation system of the app needs a lot of setup and and a lot of boilerplate code. There is no official react native repository for official packages like there is pub.dev for flutter sdk. Lots of third party npm packages are not maintained by the authors, which in turn causes errors when trying to use with latest versions of React native. Example:- Lots of packages still use ViewPropsType imported from react-native package which is deprecated now. Another pain point I faced recently was following the documentation for migrating my react native app to the latest version i.e. > 0.71. The migration was not successful due to incomplete steps given in the migration guide, due to which I had to revert back to my previous react native version.",
    "Backward compatability. Every two years, there is drastic change in implementation forcing library authors and devs to struggle to cope up, especially with large projects.",
    "Push notifications and universal links.",
    "Requires deeper knowledge of native app development and tools than initially expected ",
    "upgrading versions",
    "Ambiguous integration with web and native platform",
    "bugs related to Xcode/iOS/macOS updates, abandoned modules that are using deprecated/removed RN features, updateing RN version for iOS (project.pbxproj)",
    "New arch transition period",
    "DevX",
    "lot of problem to compile android project , need to install packages like libicu-dev on ubuntu tat was not on the documentation, hard to find the solution !",
    "1. the animation in react native seems to be limitation\n2. navigation is not yet smooth as flutter app",
    "- Many native dependencies aren‚Äôt well maintened\n- react native api design should be more aware of other target than mobile (but it‚Äôs in progress, pointer api seems great !)\n- reanimated and gesture-handler are essential for a good app feeling today, i like animated for simple things but layoutAnimations are essential today (and i don‚Äôt talk about the current layoutAnimation api on RN‚Ä¶)",
    "Too many super important features are supported by poorly maintained third party libraries.\n\nCryptic crash reporting in production sometimes.",
    "upgrading react native (especially bare app that includes expo modules), vast majority of libraries focus only on android and iOS, which makes react native web and other platforms difficult to use, support for other platforms",
    "List performance, outdated Yoga, and upgrading ",
    "UI differences between platforms\n",
    "- monorepo are hard to maintain\n- native libraries are hard to bootstrap",
    "Performances",
    "Making JavaScript, TypeScript, and all native dependencies work together is a pain when upgrading to newer versions. Much of it has to do with the JavaScript eco system. I helped a company upgrading expo, and they had deleted the yarn.lock file. Then react types suddenly were upgraded to newest version while the client was still on 17 ish. With other clients I have seen issues with upgrading packages means other packages doesn't work. So my resolution the recent years is to have as few native dependencies as possible. E.g using expo when I can. ",
    "Speed loading & animation library is painfull",
    "- Migration to the New architecture\n- mac m1 support without rosetta \n\n",
    "The lean core approach makes it that building an app requires integrating multiple 3rd-party libraries, that aren't always well maintained and might have conflicting requirements.\nMost of the documentation assumes that a greenfield app is being built, which alienates folks trying to progressively migrate their apps to RN.",
    "Native components",
    "The ability to not generate new Android and Ios easily",
    "bundling takes time\n\nupgrade",
    "Native issues, projects breaking if untouched for relatively short periods of time, Android performance.",
    "Debugging, design patterns for performant apps / set of best practices mentioned in official docs with examples. ",
    "Styling, deployment, debugging.",
    "upgrading version, now with the new architecture, we'll have a breaking change, some libs will work, some won't",
    "working with Android Studio",
    "There‚Äôs a lot of try an error. ",
    "Animations are difficult to implement when compared to CSS animations on web.",
    "Debugging, Animations, Navigation, canonical/proper OTA solution, Upgrading",
    "Weird crashes and hangs that cannot be checked or logged.\nNot using Swift for Native. \n",
    "Lack of official packages like permissions. Maintainers can't keep up. Performance on Android. Good debugging tools.",
    "Pain points are mostly solved by expo prebuild and maestro, which I believe is monumental for React Native.\n\nWhat I think is hard is getting sensible output, that's easy for people with given OS domain knowledge:\n- what version of Android / iOS is required, how to change that\n- how to output built project for debugging or tests\n- how to test iOS / Android apps",
    "Dead packages",
    "Great UI libs, lack of native components (context menu, etc)",
    "Poor quality of community modules / community lacking the resources to maintain development. Developing native modules for multiple platforms is technically too challenging for conmunity maintainers. Out-of-tree platforms struggle to keep up with the RN APIs and maintaining reasonable compatibility. Community support for these platforms is even worse. PRs do not get merged, issues remain open. We need way stonger support for the core community modules, like FileSystem, Reanimated, WebView etc.",
    "speed in comparison to native output",
    "debugging, error messages",
    "Easier to add custom native code",
    "Update RN version",
    "Native apis, platform api acess, VR And AR packages",
    "The \"vanilla\" package is too large in scope, would like the react-native package to provide only the bridge, JSI, module registry, Fabric. Smaller API will improve stability with fewer breaking changes.\n\n",
    "Styling to accomplish themes is hard and solutions out there are not what I'm looking for.",
    "Animation is hard compared to Flutter\nMaking games is hard compared to standard app\nMulti-platform is complex and need knowledge (web, tv, Marcos, desktop,etc)",
    "libraries",
    "Share extension, keyboard, performance",
    "Navigation. I think we need full customizable native navigation solution. Unfortunately react-native-navigation lack of customizable. And react-navigation is working on one activity. On android side it hurts sometimes. ",
    "Many android apis can't able to use in react native without making native modules ",
    "if the application is complex and there is a major update it will be difficult to make changes if you have used many packages",
    "KeyboardAvoidingView, man just make it work! Surrounding a scrollview containing inputs with the KeyboardAvoidingView should just work. ",
    "Navigation,Performance",
    "Upgrading Versions without expo",
    "Navigation and deployment",
    "Performance optimization resources ",
    "Updating, switching to the new architecture.\nDeprecated packages",
    "buggy react-native-debugger (the stand-alone macOS app)",
    "Performance, DX",
    "native codes to access device capabilities.",
    "upgrading react-native version, dependencies",
    "Performance, number of libraries",
    "upgrading, specially when depending on other libraries. unmaintained libraries. js performance not reliable",
    "Navigation is much harder than it should",
    "Xcode\nTypescript\nCode signing and deploy",
    "rn version updates...",
    "Debugging sucks.",
    "Break changes in each next version",
    "Too many breaking changes between versions. They also rollback some of them\nBetween versions. Lack of official pckages for core features like navigation ",
    "Abandoned third party libraries and the whole upgrade mechanism ",
    "Upgrading from one version to another",
    "Platform inconsistency, slow migration to Fabric of community libraries",
    "Platform inconsistencies, Stylesheet API",
    "Bad debugging experience, unstable build processes, hard to keep up to date (upgrading react native is painful), no typescript documentation, hard to trust 3rd parties, lack of central authority, hard decide what is the right choice (a bit like flowtypes, vs. typescript in the past). ",
    "Testing apps manually sucks, expo go is a terrible app, apps become slow with increasing complexity ",
    "CICD",
    "updates, monorepos, first time setup",
    "Some performance issue working with ffmpeg.",
    "tooling",
    "1) RN version upgrade is too complex\n2) No easy way to add breakpoints",
    "Brownfield development"
  ],
  "rn2022__tools__tools_other_tools__others": [
    "NX",
    "Babel.js, Metro, ESLint, Prettier, GitHub Actions, GitHub Copilot"
  ],
  "rn2022__tools__tools_starter_templates_other__others": [
    "BAM app generator (internal)",
    "NX",
    "Typescript template, rnx-cli (Xmartlabs)",
    "npm create tamagui",
    "Expo init ",
    "nx",
    "react-native init MyAp --template react-native-template-typescript",
    "Own template",
    "create-react-native-library",
    "create-dripsy-app, create-nativewind-app, turborepo + expo",
    "https://github.com/criszz77/luna",
    "expo",
    "create-react-native-app",
    "For JS/TS balance : none of them because writing with Rescript",
    "Own",
    "tamagui starter, solito starter",
    "create-react-native-plugin",
    "Custom",
    "Glim",
    "Tamagui starter",
    "solito blank boilerplate",
    "i don't use ignite because i don't want to use mobX",
    "Custom company template",
    "I build our own STRV project template",
    "expo init",
    "callstack/repack",
    "rnx-cli",
    "create-solito-app",
    "Nrwl nx",
    "npx expo init",
    "bob builder(for libraries)",
    "expo-starter",
    "I use `thundersdata-frontend/rn-template` to initiaize rn project in my company",
    "Starter template with typescript "
  ],
  "rn2022__resources__resources_initially_learn_react_native_other__others": [
    "William Candillon",
    "Mainly stackoverflow or random googling",
    "Following a bunch of people working with React Native on twitter",
    "Other docs, can it be done it react native?",
    "Articles",
    "Following RN devs on twitter",
    "Blog posts, pairing ",
    "By following developers on Twitter",
    "Conferences!",
    "Blogs\nTwitter",
    "Medium, dev.to",
    "Twitter, Github",
    "Discord community",
    "Evan Bacon‚Äôs Twitter",
    "Looking source-code of different libraries",
    "Trial and error",
    "Blog posts",
    "Twitter is a massive knowledge base, if you know how to search.",
    "Blogs\n",
    "Source code ",
    "GitHub issues LOL",
    "I go on Github projects and check the source code",
    "twitter",
    "Google , ChatGpt ",
    "Watching conferences",
    "Other React Native repositories, Source code of libs",
    "Conferences (e.g. React Native EU)",
    "CAN IT BE DONE IN REACT NATIVE",
    "Internal documentation in my company ; training from fellow coworkers",
    "Blogs/Articles",
    "Open source projects",
    "Twitter and blog posts",
    "github",
    "Lodash",
    "Newsletters",
    "GitHub, Twitter",
    "Twitter",
    "StackOverflow",
    "ChatGPT and community discords",
    "React native radio podcast",
    "GitHub source ",
    "Reading code. Building libraries.",
    "App.js",
    "Working on projects, learning on the job",
    "following people on twitter, newsletters",
    "Reading source code",
    "Twitter, Reddit, Blog post",
    "blogs on the internet",
    "Practise on-the-job.",
    "Github repos\nBlog posts",
    "youtube and docs ",
    "github and twitter",
    "Github",
    "Github, Twitter",
    "React native radio podcast is the best",
    "subscriptions to lynda, pluralsight, udemy"
  ],
  "rn2022__developer_background_industry_sector__developer_background_industry_sector_other__others": [
    "Myself PET PROJECTS",
    "FoodTech",
    "FinTech",
    "Streaming",
    "Sporys",
    "IOT",
    "Social services",
    "Design systems, dev tools",
    "smart houses",
    "IoT solution",
    "service sector (like thumbteck)",
    "CRM",
    "Music",
    "Games",
    "Ticketing/Registration",
    "HR tech",
    "Gambling",
    "Sport",
    "on demand work platform",
    "Fotography",
    "Banking",
    "sports and health",
    "sports",
    "petroleum management",
    "Video Game",
    "Photography and art",
    "Sports",
    "gambling",
    "Environmental services and employee engagement programme. ",
    "Mindfulness",
    "HR",
    "Gaming",
    "Productivity",
    "Food and Delivery",
    "Food-service\nMarine navigation",
    "IoT",
    "retail",
    "Sports/outdoor recreation ",
    "Smart home",
    "Wellness and fitness apps ",
    "Religious",
    "Company Portal, Fitness",
    "Fitness",
    "productivity apps\n",
    "saas",
    "Dating",
    "Technology",
    "Energy",
    "Productivity / Business",
    "I created Embedded Hardware from Scratch, desiging a React Native app to communicate with the new hardware.",
    "Religion",
    "Benefits",
    "Home Services",
    "Sport, performance, scouting, management system ",
    "Sports/outdoors ",
    "Home automation",
    "Social network\nResearch projects",
    "Planning tool",
    "Equestrian",
    "Fintech",
    "Weather",
    "HR, F&B, Lifestyle",
    "E commerc ",
    "open source library",
    "Food, sustainability ",
    "Smart Home",
    "TV",
    "gaming",
    "Iot based smart home"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_internationalization_other__others": [
    "nothing",
    "plain old i18n + expo-localization",
    "Shopify/quilt/i18n",
    "React-intl",
    "Lingui",
    "Polyglot",
    "I18n-js",
    "@shopify/react-i18n",
    "Custom",
    "i18njs",
    "rolled my own/custom",
    "react-intl\nlingui",
    "Typesafe-i18n",
    "typesafe-i18n",
    "FormatJS",
    "lingui-js",
    "Own",
    "polyglot",
    "lingui",
    "Intl js",
    "Custom ones always worked best for us",
    "i18n-js",
    "lingui js",
    "expo-localization",
    "react-intl",
    "@wojtekmaj/react-t",
    "i18n-js expo-localization",
    "Own solution ",
    "expo-localization is the only package I‚Äôve ever used for this. ",
    "react-native-i18n",
    "Lingui\nReact-intl",
    "prefer to write own util",
    "custom solution",
    "LinguiJS",
    "fluentjs",
    "React ridge translations"
  ],
  "rn2022__state_management__state_management_other__others": [
    "Relay is a big no-no",
    "mobx state tree",
    "Mobx - used it, would use again",
    "Mobx and MST",
    "useSWR",
    "MobX is only and the best option for state management, I don't know why is not mentioned here",
    "Mobx-state-tree",
    "overmind",
    "Redux Persist",
    "WatermelonDB: Heard of it > Would like to learn",
    "MobX-State-Tree",
    "MobX, it makes complex app simple.",
    "Mobx state tree",
    "Re-Frame (via ClojureScript)",
    "Relay",
    "MobX > would use again",
    "Mobx ",
    "MOBX",
    "MobX. Why it not listed here? It's the best in case of reactivity and efficient rerenders and totally unlinked from any UI framework",
    "MobX, MobX State Tree",
    "By using rescript with pattern matching is enought for state management",
    "MobXTree",
    "Urql: use it, would use again. Very heavily invested in it with custom exchanges to do local CRDT-based optimistic state on top of remote state.\nXstate: use it, would use again. Very heavily invested in it for complex interactions.",
    "Rematch",
    "MST",
    "We use state-decorator, which is our own open source state management library",
    "Xstate",
    "Mobx",
    "effector",
    "Mobx, XState\n",
    "MobX / MobX-State-Tree",
    "valtio",
    "mobx",
    "MobX: Used for all my projects, would use again",
    "Redux saga",
    "XState",
    "urql\nin general graphql client libraries takes care of most state management, add a few React Contexts and it's usually enough ",
    "Mobx\nMobx state tree",
    "xstate",
    "MobX",
    "Redux toolkit",
    "easy-peasy",
    "Heard of Valtio as well, seems interesting",
    "MobX State Tree, XState. Weird they weren‚Äôt mentioned.",
    "Effector",
    "Relay - we use this as the primary data layer and partial state management for our apps",
    "Redux Toolkit ",
    "Also not interested in mobx\nMaybe Xstate could also fit into this category. Would like to learn",
    "Valtio",
    "MobX State Tree",
    "SWR",
    "I've used SWR too, similar to react-query\nLiked it and would use it again",
    "Mobx-State-Tree",
    "Mobx (Mobx State Tree)",
    "urql, react-atomic-state",
    "react-ridge-state",
    "mobX",
    "Rtk query",
    "MobX, MobX state tree",
    "Mobx - Love it! ",
    "MobX-State-Tree ",
    "Mobx-state-tree., serialization is an issue with navigation persistance though. Other than that works ok.",
    "https://github.com/anurag6713/ninja-store",
    "Mobx State Tree",
    "MMKV",
    "I use my own state management library:\n\nhttps://www.npmjs.com/package/fluxible-js\nhttps://www.npmjs.com/package/react-fluxible",
    "Used MobX, may use again",
    "micro-observable \nUsed it > Would use again",
    "use-context-selector",
    "react-native-mmkv, react-native-async-storage, sovran-react-native",
    "redux-loop",
    "XState ",
    "RTK Query (part of redux toolkit, but honestly is a bit of a different beast to just redux)",
    "Easy peasy would use it again",
    "swr",
    "React-ridge-state",
    "mobx(used it and would use again)",
    "XState (for in-app flow management)",
    "Overmind",
    "nanostores, valtio",
    "React bridge state is awesome",
    "urql",
    "mobx-state-tree",
    "async-storage with react context ",
    "https://github.com/ctrlplusb/easy-peasy",
    "MobXStateTree Used it would use again",
    "react-hook-form",
    "Custom in-house solution we call \"Nexus\". Replicache RN binding would be great, however.",
    "Using MobX",
    "MobX MST",
    "MobX - would like to learn",
    "Mobx State Tree, MobX",
    "Urql Client",
    "State-decorator",
    "Mobx!!! The best library for state management!",
    "Remx",
    "MobX: Heard of it > Would like to learn",
    "Mobx, Mobx-State-Tree",
    "Redux Toolkit Query",
    "Context API"
  ],
  "rn2022__data_fetching__data_fetching_other__others": [
    "Redux Toolkit (codegen from OpenAPI)",
    "API sauce ",
    "RTK query",
    "jQuery, RTKQuery",
    "wretch, ky for simple data-fetching",
    "Firebase / Firestore SDK",
    "Wretch! Tiny wrapper around fetch api",
    "Firestore",
    "ky",
    "RTK Query: used it, would use again!",
    "RTK Query (as part of state management)",
    "RTK-Query üëç",
    "URQL",
    "Urql: use it, would use again.",
    "Urql",
    "Cookies are unreliable and I've got clients that have older systems which I'm forcing to implement jwt processes. It's fine but it really is this way, debugging this is kinda hell too so i have up on cookies on rn in any lib",
    "Wretch",
    "urql",
    "gRPC",
    "redux-toolkit-query",
    "Hasura",
    "Ky",
    "Rtk query",
    "Realm",
    "Redux Toolkit Query",
    "WS",
    "Rtk query ",
    "apiSauce",
    "I've been using Orval for REST API TypeScript generation from Swagger. It works great! I was trying to find a similar types generation tool for REST after using Apollo codegen for GraphQL and found this gem.",
    "Firebase",
    "RTK Query",
    "RTK-query",
    "RTK Query: Used it > Would use again",
    "RTKQuery",
    "apisauce",
    "react-native-network-client"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_interactions_other__others": [
    "use animated sensor",
    "Excited to try the new PointerEvents API",
    "react-xr",
    "Gesture handler has memory problems and seems very unstable. "
  ],
  "rn2022__opinions__opinions_missing__others": [
    "Keyboard handling",
    "Easy migration from expo to react native cli and vice versa. Currently I am working on an expo app and had to eject due to expo app being very  heavy in size. The modules from expo are still in my components being used even when I ejected. The start script still uses expo and the expo modules are not converted to react native directory modules. Development with expo is damn easy and I love it but it has its drawbacks.",
    "Official GitHub Actions for CI/CD",
    "Out of the box features for ex: scanning a credit card, authentication with google or apple etc...",
    "A stable release. RN needs a 1.0, how do we get there?",
    "A11y is terrible\niOS text not being actual text to allow selecting parts of the text without writing hacks\nBetter animation APIs are needed. ReAnimated has a bunch of bugs that breaks when using some other libraries",
    "Skia performance",
    "Better web support",
    "Viewport units https://github.com/react-native-community/discussions-and-proposals/issues/576\n% support for fontSize https://github.com/react-native-community/discussions-and-proposals/issues/578\n% support for borderRadius https://github.com/react-native-community/discussions-and-proposals/issues/577",
    "better optimization for animation and gestures ",
    "Advanced animation tools. Animated and Reanimated are great(!) but I'd love to see things combined with something like Skia in order to make it easier to create particle animations etc.\n\nWould also like to see some kind of build tool that is written in JavaScript because Fastlane is pretty bad even though it works. Documentation is lacking and ruby feels odd to use.",
    "Instead of Hermes, compile Typescript to WebAssembly / native code.",
    "Good video player lib",
    "3d/panorama - related to camera",
    "Faster ui creation, easyer build creation ",
    "Better performance",
    "Physics engine",
    "Web flex props",
    "Grid layout!",
    "native video player (this was very problematic last time I needed it)\ndebugger with good developer experiment in mind",
    "typescript and SVG use out of the box.",
    "Expo Share Extension",
    "built in local database",
    "Add breakpoints easily\nTools to help version upgrade",
    "multithreading",
    "Ffmpeg custom support. ",
    "android shadows, better debugging, better web compat ",
    "Official out-of-the-box components (maybe native look&feel for both iOS and Android)",
    "Smart watch os",
    "Web workers ",
    "Performance for large complex projects.",
    "A lightweight web component integration so I can nest web features/components for third party payments without having to use react-native-webview. ",
    "better navigation library that doesn‚Äôt keep all my screens mounted nor freeze them as a workaround. react navigation feels like a temporary solution that just stayed as the accepted solution",
    "Libraries like react native tabs (has been archived), complex animations, eas updates in bare react native without using expo or appcenter/fastlane",
    "Flat list which have same performance as recycler view",
    "An official repository for React Native which will be maintained by Facebook/Meta team just like pub.dev is available for Flutter.",
    "Easier SwiftUI and jetpack compose integration",
    "AR/VR",
    "I'd like for the URL interface to provide the missing methods and properties",
    "1. Streamline the release of apps - a lot of manual processes which has to be repeated\n2. Official way for OTA\n3. Official documentation on how to release apps on stores\n4. Official navigation library to handle complex stacks/tabs navigation\n(Official = Out of the box)",
    "Grid CSS",
    "Navigation, Debugging, Android Performance",
    "- widgets\n- permissions (so essential, should be on core)\n- android navigation/system bar config\n- safe-area-view should be on core, because, like permission, so many dep depend on it, and it‚Äôs mandatory to habdle it for an app today (even on the web)",
    "Grids, Variable Fonts, More Native components from iOS/SwiftUI and Android/Jetpack Compose",
    "Symbolic links",
    "Styling heritage ",
    "Forms, native like validation of input texts",
    "A component library that doesn‚Äôt enforce styling, similar to Headless UI, specifically for react-native",
    "A integrated IDE like we have android",
    "There are no native components from platforms, like drawer or bottom sheet",
    "Native courses (ios, android) that target react devs. Missing css features (gap gradient shadows...). Flatlist api is annoying, I keep reversing its inversion of control.",
    "direct access to native apis (apple pay for example)",
    "no well maintained library to handle Running a background timer/task ",
    "Set of paid/battle tested packages (audio,ads,UI,‚Ä¶)",
    "File system access out of the box, file system routing, SQLite",
    "- Fetch API with ArrayBuffer\n- stable synchronous storage API (react-native-mmkv is not stable)",
    "Good stable debugger",
    "Background processing APIs",
    "Force Apple to let develop iOS apps on Windows ;)",
    "ui components",
    "Some css features (gap, grid, ...), better Android emulator ",
    "Easy web compat, css grid and friends ",
    "Sad that new architecture is not meant for performance ü•≤",
    "- Poor debugging experience\n- Poor react native web support\n- CSS grid",
    "Official state managment for react, Easy debugging ",
    "- Testing frameworks not as good/reliable as web",
    "Callkeep, pushkit",
    "Proper portal support for navigators\n\nI.e. popup an overlay of another screen temporarily to avoid code deduplication",
    "Web cross-platform",
    "It's frustrating not being able to use features like native modal detents on iOS",
    "stable database",
    "Standard library ‚Äì expo does a decent job, but feels like too much \"buy in\" is required. React Community should have more official support (from Meta, Microsoft, Shopify, SWM, Expo, etc)",
    "Improving flatlist simplifying animations",
    "Proper keyboard handling",
    "good video player libraries is really missing point. ",
    "Truely good TextInput performance, better keyboard handling overall, easier sticky keyboard components cross platform, better video and audio libraries that truely work with recycling and hls",
    "easier setup (for beginners)",
    "Framwork Stability. Through the time react native library come up with changes which often breaks things or librarys goes into unmaintained state. ",
    "Easy debugging",
    "unified shadows, good default debugging tool (as Flipper is buggy)",
    "better support for svgs, styles (css props)",
    "everything they abandoned for community to then rot",
    "A great debugging toolset",
    "CLI tool that automates the following:\n1. Upgrade process for RN and 3rd party deps\n2. Publishing app to stores\n3. Let you choose optimizations for each platform (e.g. use of Hermes, app bundles on Android, etc)",
    "Miss a lot of components, there is just some views, I would like to see more things like SwiftUI, Composable and Flutter. I would like to see a more compatibility to CSS API.",
    "ESM, faster bundlers, decoupling runtime from metro, simpler navigation solutions (eg expo router)",
    "- OTA updates\n- simplicity of developing on dynamic screen sizes and orientations (usually highly designer led but I'm curious if there's a way that engineering could simplify this instead of a ton of ternaries/conditional checks for orientation)\n- Additionally, knowing the performance/memory tradeoffs for using memoization and having tooling to properly quantify performance of the app. Reassure and react-native-performance and the new performance tooling from Shopify are in the right direction but I still find a missing place for developers to be able to quantify performance of a component or any code really (or all of the app functionality) locally and through CI. The existing tooling has limitations where I don't want them running in production for users to potentially slow them down or, in the case of reassure, many jest tests in more developed apps are highly mocked out so knowing how the app actually feels is tough. Ideally, what reassure shows in their docs about the performance delta of code within a pull request is the goal but maybe tied into some E2E tests and reporting back",
    "more official modules (camera, picker, fs, etc)",
    "Augmented Reality",
    "The ease of web",
    "More CSS features",
    "Basic animation support in StyleSheet (ex: CSS transition equivalent)",
    "better support for overlays (modals/sheets/toasts, etc)\nbetter support for blobs, array buffers, etc",
    "Native iOS components (SwiftUI Components)",
    "Better & performant data storage",
    "Proper css support",
    "Bluetooth support lucking",
    "A really good list component that doesn't use the bridge. ",
    "Good documentation for writing native modules/views.",
    "TESTING!!",
    "Vscode should be able to debug everything I don‚Äôt want to have to open another ide ",
    "Recycler View, Everything using JSI by default",
    "Native portals in core\n",
    "Android Broadcast receiver",
    "I18n built in support\nFile based routing (help us expo-router!)\nNew archi lib migrations ",
    "Buy in from the two major platforms. If they keep in mind the cross platform solutions and structure things with that in mind, it would go a long way. ",
    "Platform specific UI elements, navigation and good solution (reanimated üòâ) for implementing animations out of the box",
    "Blessed server side rendering solution.\nBuilt in bundle splitting",
    "File system based routing ",
    "Fast image loading. Fast SVG renderer WITH click events on paths like te browser has. ",
    "WebWorker like API",
    "Widgets ",
    "grid",
    "Multithreadinng ",
    "More UI natives components",
    "Better form elements like dropdowns",
    "Multithreading in JS",
    "First party libraries. Lean core made sense to get rid of two many modules that where just bundled in, but now it feels like RN is super barebones and you NEED third party libraries for pretty much anything. Navigation, Clipboard, Webview, Audio and Video and etc. These should not be third party, because then supporting stuff like new arch becomes hell on them",
    "Development, debugging tools on par with web development.",
    "Stable debugging. Flipper is so buggy.",
    "Debuggine",
    "Call platform apis in JavaScript like nativescript ",
    "A best Expo support ",
    "Better documentation learning for JSI/TurboModules/Expo SweetModules",
    "Integration with Google, apple, Facebook authorizations ",
    "an easier way to maintain app on the mid/long term.",
    "first class maps support, better BT support",
    "A installer that resolves all requirements after Android Studio and Xcode are installed, official testing solutions including E2E",
    "Apple Watch support :)",
    "Stability. I don't much care for new features, rather make existing ones work. Make major versions stable.",
    "Shared element transitions!!! That one package isn‚Äôt very good since it‚Äôs overly complex to implement and only works with the non-native react navigation navigators ",
    "A simple way to manage a dark and light theme.",
    "An easier way to manage native code on RN cli like expo did",
    "custom refresh control\nkeyboard\nnotch",
    "1. Not all community library ported to new architecture\n2. Still missing (not created yet from community) some new api feature from both android and iOS in react native \n3. Something that other frameworks has and react native doesn't have? ‚ùì",
    "Multi core architecture, better navigation",
    "Css grid",
    "More similarity with web css and web a11y, expo-image,",
    "Game development with Expo is really poor. Methods to integrate Unity and Unreal engines would probably drive lots of people to react-native / expo ecosystem. ",
    "Being able to develop on web platform (much faster and easier to test responsiveness) and then open currently viewed page in browser with context (connected user), directly in an emulator and/or a simulateur (to validate display on other platform). ",
    "Styles",
    "Better documentation, especially when it comes to native platforms",
    "Everything that expo has",
    "Micro-Frontend solutions. Repack is working on it, I know but other cross platforms can‚Äôt handle this but react native can. We think more about it\nTransform-Origin\nMore css features\nAndroid Jetpack Compose Integration ",
    "Localisation\nPerformant complex UI (recyclerlistview like FlatList)",
    "Lots of web compat. Just do more of what the web supports for both styles and props. ",
    "A better way of dealing with SQLite. Current solutions aren‚Äôt that scalable. Something similar to room and core data without the parts that suck üòÖ \n\nPerformance on android is still tricky and in general react native runs much better on iOS. ",
    "Flex gap, more web CSS properties.",
    "Seamless debugging support: Flipper does not work for iOS with use_frameworks. Hermes debugger does not show network requests and other tools. ",
    "Better support for AR/VR, keyboard and Swift",
    "A perfect Tailwind solution",
    "Support for essential feature like camera , permission‚Ä¶ those features should not depend on third party library ",
    "Proper secure storage implementation with biometry support. All existing have security issues and doesn‚Äôt comply with PCI. ",
    "Styling is far, far behind Web. Styling in web is a breath of fresh air. I can use a stable flex gap, filter/backdropFilter/transformOrigin, and more. You can't even open multiple modals on iOS, or have anything that closely resembles position: fixed and displays on top of modals. There's no sticky position. \n\nThere's no IntersectionObserver to detect if an element is in view. Using a FlatList for that use case is untenable.\n\nMeasuring performance hiccups is nearly impossible in React Native. Errors on the native side are often impossible to parse. \n\n80% of libraries that solve an important need haven't been touched in years.\n\nIf you want to add complex interactions, animation states, etc. to a native navigator, good luck. If you open the Honk for iOS app, you see beautiful native animations. Same goes for Square Cash. These apps could not be built with React Native. Airbnb's Shared Element Transitions give a similar reaction.",
    "Building apps should be as simple as buimding webapps from the setup perspective",
    "Advanced UI layout and components. Flatlist is too limiting. Debugging native and js codebase is still very poor. ",
    "there are only few reliable third-party libraries available",
    "An easier way to write modules and test them. There probably should be an official bootstrapping tool for the new architecture ",
    "improving the test libraries and official web support ",
    "There is a lot of garbage collection overhead for React and React Native, and almost no public benchmarking suite",
    "Web navigation",
    "Basic stuff and performance still not where it needs to be. E.g we still can‚Äôt use fabric ",
    "Support for modern CSS features in StyleSheet API (Media Queries, Grid, Responsive Units, ...)",
    "Share extension, ear sensor, keyboard in general",
    "Better cross-platform navigation/header solutions for iOS+Android+Web",
    "Easy-to-use profiling tools. Debugging tools for JSI modules.",
    "Notifications and native navigation out of the box, proper recycling lists, multi-thread",
    "responsiveness. I mean media-query like native equivalent.",
    "Better performance monitoring and tools to detect memory leaks",
    "Grid support, Core navigation solution, Better box-shadow support on android",
    "Debugging",
    "filesystem and storage",
    "iOS-like blur on Andriod",
    "Over the updates, high abstract ",
    "Native API like media processing like audio, video, images ",
    "First party support for commonly used libraries such as a sqlite or a camera library that‚Äôs officially maintained. ",
    "Web",
    "First party datetime picker \nGood camera library ",
    "iOS widgets, Android widgets",
    "Native state management like redux",
    "Better web support without increasing the bundle size on the web so much.",
    "REM values for StyleSheet API, fist-class Swift and Kotlin support",
    "Better image caching, better flatlist performance",
    "A more exhaustive UI component library. I end up using 2-3 different ones (Paper, Elements, etc) and that isn‚Äôt very effective. ",
    "Organised documentation with example ",
    "Multithreading",
    "Promotion to regain popularity, I already had people asking me if Facebook had not killed React Native",
    "Grid",
    "Lack of universal web/mobile fullstack framework",
    "1. animation\n2. smooth navigation on android devices, ios seems fine when using react-navigation",
    "some css feature - better js bundling with tree shaking - more descriptive guides",
    "Faster compiler and simpler navigation",
    "More doc about native modules ",
    "Styling strategies, multi-platform e2e testing, native files management.",
    "Easier way to fork existing Views and modules. It‚Äòs difficult to fix little issues without patching rn.",
    "Efficient 3 platform development is not there yet, waiting for Tamagui + Expo Router",
    "easy animation library, more core modules support (it can't be that the webview is separated or even the clipboard)",
    "Very few features are missing, many are sub-par experiences. They often don't handle real-world complexity very smoothly.",
    "Execute js code on different threads, easily communicate between js and native back and forth ",
    "Better docs, reliable librairies and easier package installation.",
    "Core API dependencies (eg. navigation, SVG, localStorage), Advanced layout system, good standard for versioning management",
    "Multi threads ",
    "Grid Layout ",
    "React native for smart watches",
    "Speed, more speed, easier deployments",
    "better \"in\" solutions from react native core team.",
    "build to linux desktop",
    "Font Faces",
    "More diverse styling options, e.g. grid from web.",
    "Better performance ",
    "Being able to apply effects to native components such as filters, for instance grey scale",
    "All in one debugging solution. Flutter is close but not stable. It‚Äôs plugins are also not stable. ",
    "A better debugging experience",
    "Components",
    "SVG",
    "support for old modules in the new architecture",
    "Needa better debugging",
    "I would like to make complex animations very easily. Every time I need to play with Animated or reanimated, I am having hard time.\n\nAlso, I would like to easily make my rn-app working on tv or desktop or web without a lot of configuration, librairies and issues",
    "Native controls. \"Official\" solutions to common functionality so there is less dependance on half-baked community libraries to fill in the gaps. Performance optimization.",
    "I can't use CSS \"filter: blur\" on text\nMedia playback is extremely tricky with OSS solutions and diverges so much from web APIs. None of the audio/video player solutions have support for WebVTT subtitles (cuechange events), or support for caching, buffering, capabilities of multiple players, limited notification playback control support, etc.",
    "Css features",
    "Grid layout for css : flexbox is not suited for all needs.",
    "source of simple animation library because UX is most of concern every company",
    "built in Responsive, Built in TS support/TS compiler",
    "Integrated cross platform dev experience",
    "A feature to capture resource usage (CPU %, GPU %, Storage, etc) in real-time.",
    "Better debugging options with Expo.",
    "widget, wearable integrations, more sensor!",
    "Navigation and push notifications.",
    "The Settings turbomodule (allows accessing UserDefaults on iOS out of the box) doesn't have an Android counterpart, forcing the creating of a custom Native Module (and async operations).\nBeing locked-in with Metro as a bundler feels like a missing opportunity as well, as it hasn't seen a significant DX upgrade in quite a while.",
    "Some styles of css, control over strict mode, dinamic style sheets values",
    "a better way to do animation on the UI thread",
    "Debugging easily with breakpoints",
    "Box shadow on android",
    "A better media editor\nA video editor",
    "type-safe, no compiler to check compile time errors. easy to make mistakes with hooks, and no preventive tools from the RN platform. No preview of screen UI like in swiftUI.",
    "Built-in FileSystem API (or community modules backed by strong commercial forces). Pointer Events API (luckily coming already). Better e2e test frameworks with support for out-of-tree platforms and native modules.",
    "A solid debugging experience.",
    "bug-free react-native-debugger",
    "Shadows on Android that have parity with iOS\n",
    "I don't feel like there are missing feature, if I could decide the direction I would put all the effort in improving what already exist. ",
    "Audio ",
    "tree shaking",
    "I should be able to write Swift and Kotlin code and access it easily from the JS runtime. JSI seems like a lot of work and things can go south. Codegen is not well-documented and kept changing. I guess we need more stability.",
    "Navigation is such an integral part of native apps. I think the expo-router is a good intention. Something like a folder structure with a config file in each nested folder should be the way."
  ],
  "rn2022__react_native_specific_features__react_native_features_ota_updates_other__others": [
    "dont use it yet",
    "Re.Pack",
    "Now started experimenting with codepush ",
    "Considering EAS Update, as CodePush has opaque rollback issues and users get stuck on old versions. ",
    "NONE",
    "Bitrise",
    "EAS is the only suitable option, though it has a long way to go.",
    "jpush would be used frequently in China.",
    "Repack by callstack"
  ],
  "rn2022__styling__styling_techniques_other__others": [
    "I like using emotion most of the time",
    "tss react",
    "zephyr",
    "NativeBase",
    "emotion üëç",
    "UI Kitten",
    "I mostly use emotion",
    "We have a custom solution that looks like this:\n```\nexport const Container = styled(View)((theme) => ({\n    padding: 20,\n    backgroundColor: theme.semantic.card.background\n}))\n```\n\nWaiting patiently on Meta's Stylex library.",
    "I mainly use Emotion",
    "emotion css",
    "√âmotion like styled comp",
    "https://consistencss.vercel.app/",
    "Custom hook to \"improve\" the StyleSheet API to support dark/light themes",
    "style system combined with styled components",
    "react-native-extended-stylesheet",
    "native base",
    "Working on a particular proof of concept called rxn-grife \nhttps://github.com/Luffos/rxn-grife",
    "emotion",
    "native-base",
    "React Native Zephyr. Allows me to use tailwind shorthand and utilities, but abstracts them away in a styled components-like way. ",
    "StyleSheet API FTW",
    "styled-rn - lots of people are sleeping on this!",
    "Native Base ",
    "own styling solution",
    "responsive-react-native",
    "Eva design system ",
    "Emotion",
    "Whirlwind",
    "\n",
    "RNUI",
    "react-native-tachyons\n",
    "Native Base",
    "Nativebase",
    "Used Dripsy for a while. That could fit it these options too.",
    "twrnc",
    "My experience with dripsy was really good. Fast and easy to use with unlimited applications",
    "Dripsy",
    "Stitches Native",
    "It is something necessary when using hooks like useColorScheme(), but it could get a lot better.",
    "tailwind-react-native-classnames",
    "emotion (when it comes to react-native it's basically the same as styled-components but without the typescript perf problems)",
    "ESStylesheet"
  ],
  "rn2022__resources__resources_podcast__others": [
    "LogRocket",
    "React native radio, syntax fm",
    "React Native Radio\nReact Native Show Podcast",
    "React native Radio",
    "React Native Podcast",
    "https://reactnativeradio.com",
    "The React Native Show, React Native Radio",
    "React Native Radio, React Podcast",
    "React Native Radio, React Podcast, JS Party, The React Native Show Podcast, Flight Review,  devtools.fm, The Eric Normand Podcast, Coding Blocks, ",
    "React native podcasts by infinite red ",
    "react-native-radio",
    "React native radio podcast",
    "React Native Radio, The React Native Show Podcast",
    "The React Native podcast",
    "The React Native Show",
    "React Native Show Podcast",
    "react native radio ",
    "REACT NATIVE RADIO",
    "React native radio\nSyntax fm\nChangelog js party \nShopTalk",
    "React native radio",
    "Syntax, React Native Radio",
    "React Native Newsletter, changelog",
    "react native radio",
    "React Native radio",
    "https://reactnativeradio.com/",
    "William Candillon",
    "React narive podcast (infinite red)",
    "none ",
    "rocketseat",
    "React native radio ",
    "React Native Radio, Callstack's The React Native Show. I can't remember when needed.",
    "Callstack ",
    "The podcast from infinite red",
    "React Native Radio\nThe React Native Show",
    "The react native podcast",
    "The React Native Show\nReact Native Radio",
    "React Native Radio",
    "SynthaxFM",
    "react native podcast",
    "The React native show Podcast \nLadybug \nArtisan d√©veloppeur ",
    "React Native Radio, The React Native Show",
    "React native podcast / Swift by sundell",
    "Callstack, react native radio, infinity red",
    "Syntax, The React Native Show",
    "React native podcast ",
    "React Native Radio, The React Native Show, The Firebase Podcast",
    "React Native Radio, The Changelog, JS Party, PodRocket",
    "Rn radio",
    "none",
    "React Native Radio\nThe React Native Show Podcast",
    "None",
    "react-native radio",
    "React Native Podcast, React Podcast, PodRocket, The React Native Show",
    "react native radio, the react native show",
    "react native show podcast",
    "callstack",
    "react-native podcasts by Infinite Red",
    "React native radio. The react native show podcast ",
    "react nativer adio",
    "Syntax - Tasty Web Development",
    "nothing",
    "Syntax",
    "Infinite red"
  ],
  "rn2022__deployment__deployment_other__others": [
    "bitrise",
    "Write a GitHub Actions config by myself and deploy automatically.\nI think it will be better if the community provides an official GitHub Action.",
    "CI + APIs",
    "bitrise ",
    "Fast lane but running on Bitrise & triggered directly from GitLab",
    "expo",
    "automated development using xcode",
    "Github + fastlane",
    "Jenkins",
    "Bitrise ",
    "We use a custom script to build and then we manually upload.",
    "GitHub Actions with r0adkll/upload-google-play",
    "Custom Circle CI Orb (or use what the core team has) / Github action for building and deploying the app. Takes a bit longer to setup but waaaaaaay easier and more manageable. Do it once, enjoy always",
    "Bitrise.io ",
    "xcode cloud\n",
    "XCode Cloud",
    "Custom CI (uses fastlane underneath)",
    "Codemagic",
    "Bitraise",
    "Build android apps with terminal commands.\nBuild ios app with xcode.",
    "Custom library API",
    "GitHub actions",
    "Bitrise CI/CD",
    "Bitrise",
    "I'm happy with Codemagic",
    "Firebase and via our CodeMagic pipeline ",
    "https://www.runway.team/",
    "Xcode cloud",
    "Bitrise for continuous deployment",
    "nutpipe.com",
    "GitHub Actions using CLI tools to form a fully automated submission process",
    "GitHub actions "
  ],
  "rn2022__resources__resources_read__others": [
    "Sebastien lorber newsletter",
    "https://www.callstack.com/blog",
    "Tkdodo",
    "Medium. React native newsletter",
    "React Newsletter by Sebastien Lorber ",
    "This week in React",
    "https://thisweekinreact.com/",
    "Udemy",
    "Medium, Dev.to",
    "React Hebdo\nMedium\nDev.to",
    "Kent C Dodds, ThisWeekInReact, Matt Pocock",
    "This week's in react",
    "Dev.to, medium stack-overflow etc",
    "mostly docs :)",
    "twitter.com",
    "Meduim",
    "logrocket",
    "Medium Dev.to",
    "medium.com, danabramov.com, overreacted.io, docs.swmansion.com, kentcdodds.com/blog",
    "\nS√©bastien Lorber ",
    "React Native blog, several devs on Twitter",
    "Sebastien Lorber's \"This week in React\" newsletter.",
    "https://thoughtbot.com/blog, This Week in React",
    "Hackernoon, \nMedium\nDev.to",
    "medium, Bam blog, Shopify engineering",
    "Huge shout-out to LogRocket's blog. I have never used their service but they write really good articles for doing things in React and React Native.",
    "Medium \nDev.to\nSebastien Lorber ;)\n",
    "medium ",
    "Twitter, Reddit",
    "swmansion blog in medium",
    "Medium\n",
    "This Week In React\n",
    "https://overreacted.io/",
    "Expo",
    "None",
    "Twitter üê¶ ",
    "Logrocket ",
    "Medium, dev.to, blog post from react native companies.",
    "Medium, dev.io",
    "Software mansion, expo blog",
    "Medium, kodeco, react native weekly",
    "Expo, Blog rocket, dev.to",
    "Sebastien Lorber's newsletter, Shopify blog, Wix blog, RN blog",
    "medium.com, dev.to, notjustdev",
    "React Native newsletter",
    "Bitrise, call stack, hashnode ",
    "Software mansion, wix engineering ",
    "Shopify Engineering sometimes, various Medium articles normally.",
    "Newsletter Sebastian Lober",
    "onwebfocus.com",
    "Exposition, App.js workshops",
    "Notjust.dev",
    "Red Shift",
    "Dev.to, Medium (numerous), Kent C. Dodds, Official RN Blog, Twitter ",
    "Twitter",
    "Medium ",
    "ChatGpt",
    "overreacted, kentcdodds, Hackernews",
    "Week in React",
    "Pragmatic engineer, medium, log rockets",
    "Expo Blog",
    "Fireship, react native subreddit, various machine learning and AI subreddits etc",
    "This week in react / Ignite newsletter",
    "React Native News, This Week in React",
    "React weekly",
    "This Week In React",
    "This Week in React",
    "medium",
    "nojust.dev",
    "ThisWeekInReact",
    "React Native Blog and Expo Blog",
    "Medium, blog logrocket",
    "Kent C. Dodds blog\nDan Abramov blog\nSoftware Mansion blog\nMedium (various authors)",
    "Sebastien Lorber newsletter",
    "blogs: bam.tech, callstack, software mansion\nalso newsletter: RN newsletter from infinite red, React Newsletters from Tyler McGinnis and Sebastien Lorber",
    "Medium",
    "Siso quester studios",
    "ThisWeekInReact.com",
    "Medium, dev.to",
    "Callstack blog",
    "https://thisweekinreact.com, https://reactnative.dev/blog",
    "React Native Newsletter, React Newsletter, ",
    "thisweekinreact - react native newsletter by infinite red",
    "Medium.com, LogRocket Blog, Expo Blog"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_storage_other__others": [
    "react native keychain",
    "Pouchdb",
    "file system",
    "react-native-encrypted-storage",
    "File system",
    "expo-secure-store",
    "Expo-secure-storage",
    "https://www.npmjs.com/package/react-native-sensitive-info",
    "URQL Graphcache",
    "react-native-keychain",
    "redux-persist",
    "Apollo cache",
    "React Native Quick SQL",
    "Firestore",
    "react-native-secure-key-store",
    "Encrypted Storage",
    "rn-fetch-blob",
    "React native keychain",
    "realm-js",
    "Redux persist",
    "react-native-quick-sqlite",
    "Direct bridge to Native Modules that manage UserPreferences / UserDefaults.",
    "Quick-sqlite",
    "react-native-encrypted-storage, expo-secure-store"
  ],
  "rn2022__developer_background_before__developer_background_before_other__others": [
    "I stopped using RN after 6 months and focus on ReactJS. 5 years later I'm back at RN",
    "Manager, Team Lead, Tech Lead, Business Analyst",
    "visualization engineer",
    "Full stack PHP",
    "Xamarin .NET",
    "cordova",
    "Game Developer",
    "Data Analyst (not IT)",
    "Rails",
    "Cordova, Ionic, C#",
    "HTML",
    "Project Manager",
    "Unity",
    "angularjs, nodejs",
    "WinJS (Windows 8 & Windows Phone 8.1 way of creating apps with JS)\nEnyoJS (WebOS 3 way of creating apps)",
    "design, full stack",
    "Product Designer (UX/UI)",
    "Mobile developer (Xamarin Forms)",
    "Data analyst ; engineer in energy ",
    "javascript",
    "Android",
    "grafic design",
    "Designer",
    "Ionic, cordova",
    "Graphical peogramming engineer ",
    "SAP programmer",
    "Ruby on Rails",
    "10",
    "Student",
    "Cordova/PhoneGap",
    "Fullstack developer and parttime designer ",
    "Mobile developer with hybrid framework (Ionic)",
    "Engineering",
    "Student and then DevOps",
    "I was in college and for the internship I learned react Native ",
    "Data engineering / analytics",
    "design",
    "designer",
    "Titanium ",
    "Generalist",
    "Graphic Designer",
    "I'm a brogrammer. I can do everything",
    "fullstack",
    "AngularJS, plain JS, jQuery",
    "Titanium",
    "Angular & Vue",
    "Phonegap",
    "C# ",
    "dotnet",
    "IT prior to development.",
    "Education",
    "Electronics engineer",
    "Ionic",
    "Wordpress, Excel, ",
    "Mechanical Engineering",
    "project manager",
    "C++",
    "Cordova",
    "Java background",
    "Mechanical, speciality engineering, Aerospace engineering",
    "Node.JS, Angular, KnockoutJS",
    "Database developer",
    "php, js, c++, asm",
    "GraphQL",
    "Took web classes in college. For my first large project, did react native. Then became a full stack web engineer for my day job. Now currently work as a react native engineer",
    "Java Core",
    ".Net developer",
    "Java",
    "Student in business School",
    "Machine learning",
    "Systems programmer in C/C++ and assembly languages",
    "I am 46 and I used to be an IT director in a big telecom operator. ",
    "Angular, JS and basic web dev and being a CS student",
    "Engineering ",
    "Management",
    "Game, console/Linux",
    "Jquery, WordPress ",
    "Industrial Hygiene Auditor and Chemical Engineer",
    "I was student",
    "Working as a full Stack web development teacher on high school.  ",
    "I am currently at my senior year in Computer Engineering.So React Native is my first professional area.",
    "Python (Dev/Ops) Internship",
    "Automation software engineer and video game developer",
    "Networking",
    "Ethereum Blockchain smart contracts"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_data_visualisation_other__others": [
    "Not doing any visualisation at this point",
    "Skia",
    "d3",
    "https://github.com/margelo/react-native-graph",
    "react-native-svg in combination with d3 is a killer combination",
    "We are using RN Skia to build charts natively, which has been a huge success so far.",
    "Custom ones with react-natiev-skia",
    "We don't use svg for \"data visualization\", just creating and rendering SVG images",
    "Manually done: d3 + react native svg or skia",
    "echarts with webview",
    "React Native Skia",
    "D3",
    "NA",
    "HighCharts API",
    "react native svg charts",
    "react-xr ",
    "In house for full customization ",
    "nothing from list",
    "react-native-graph",
    "Data visualization is really, really bad for React Native in my experience. Web and SwiftUI have far better solutions.",
    "highcharts",
    "react-native-wagmi-charts"
  ],
  "rn2022__platform_apis__platform_apis_other__others": [
    "Unity",
    "Health",
    "HealthKit and google fit ",
    "Apple Health and GoogleGit",
    "Quickactions, widgets",
    "QR Reading",
    "serial port",
    "WidgetKit",
    "Wifi interactions",
    "Contacts",
    "iBeacon",
    "Speech recognition",
    "Bluetooth"
  ],
  "rn2022__navigation__navigation_other__others": [
    "expo-router has the potential to disrupt the navigation game on native. Assuming it can be well-tested/bug-free, we're looking at an incredible tool in mobile dev that is the first of its kind",
    "custom router",
    "Always gonna use react navigation because i feel this is too core to be that opinionated, we all have mostly the same use cases and just want something that is easy and works. Navigation is pretty standard, there shouldn't be this much fragmentation on something that is so concrete in everyone's mind ",
    "React-native-ridge-navigation",
    "wix/react-native-navigation",
    "Reactigation",
    "wix navigation",
    "Solito",
    "I hate react navigation",
    "react-native-url-router",
    "Solito!",
    "We implement our own navigation with a library we developed for our selves. ( Named react-native-animated-layout). In future we are thinking to combine this with expo-router. ",
    "expo navigation",
    "Custom",
    "your own react-native-url-router from software-mansion-labs ‚Ä¶ weird it wasn‚Äôt mentioned",
    "solito"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_analytics_other__others": [
    "New Relic",
    "Karte\n",
    "PostHog",
    "Starting Uxcam",
    "Plausible js sdk",
    "Intercom",
    "Datadog",
    "Emarsys",
    "Tealium",
    "firebase, countly",
    "Adobe Analytics",
    "Freshpaint",
    "Statsig",
    "Fanthom ",
    "Countly",
    "Rutterstack",
    "in-house",
    "Heap Analytics",
    "Posthog",
    "In-house Solution",
    "Adobe",
    "Matomo with https://github.com/donni106/matomo-tracker-react-native",
    "Splitbee",
    "Adobe Omniture",
    "Axiom",
    "Rudderstack",
    "Moengage",
    "Branch.io",
    "SearchNode, Adjust, Braze",
    "Gainsight",
    "posthog",
    "Adjust",
    "Datadog with Real User Monitoring",
    "Simple fetch calls, rendered in mixpanel",
    "yandex.mertika",
    "Branch, Airship",
    "Google Analytics",
    "In house",
    "Contentsquare",
    "new-relic",
    "Heap",
    "piano analytics"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_crash_reporting_other__others": [
    "LogRocket",
    "Custom made using Loggly",
    "Bugsee",
    "Dynatrace",
    "Rollbar",
    "Bugfender ",
    "Raygun",
    "Logrocket"
  ],
  "rn2022__component_libraries__component_libraries_other__others": [
    "Magnus UI",
    "Custom UI components",
    "in almost all cases it's faster and easier to build your own than customizing something ",
    "I would recommend to use `@td-design/react-native` if you're Chinese developers.",
    "It's so customisations on rn paper for us, all else are simply more trouble than worth ",
    "react-native-design-system",
    "naxos",
    "Tamagui",
    "tamagui",
    "SpiroKit",
    "Rainbow Design System",
    "Ignite",
    "react-native-extended-stylesheet",
    "Tamagui üêê ",
    "Not bothered about UI libraries they‚Äôve never come in handy for clients projects.",
    "I find myself lacking exploration for this section.",
    "Magnus-UI üëå",
    "Tamagui is great.",
    " Tamagui",
    "Shopify restyle",
    "Custom components are just better for non cookie cutter apps",
    "Created own UI libraries",
    "Tamagui is also a component library!",
    "Ignite's built-in components",
    "Tamagui ",
    "Custom own library "
  ],
  "rn2022__react_native_specific_features__react_native_features_debugging_other__others": [
    "Expo",
    "An utter mess",
    "Flipper needs to work with firebase this is a serious downside. It also needs to be the default there's too much choice paralysis",
    "VS Code Extension for React Native debugging ",
    "direct debugging inside vscode ",
    "ClojureScript REPL ",
    "Chrome DevTools with Hermes, specifically",
    "Flipper is a no-no",
    "I wish debugging experience is much more mature and stable. Everyone seems to have an approach yet there isn't a defacto debugging experience. Plus hot reloading most of the time kills the app in the simulator making it a not-so-fun experience.",
    "Safari",
    "Vscode, console.log",
    "I would love to be able to use Flipper again but it's been broken for ages with use_frameworks!",
    "Chrome DevTools via expo (not to be confused with async debugging)",
    "Hermes remote inspect"
  ],
  "rn2022__developer_background_platforms__developer_background_platforms_other__others": [
    "Apple watch, PS4, Cybertruck, Apple Car, XboxOS",
    "VR",
    "SSR",
    "Huawei",
    "Android but Huawei AppGallery",
    "IpadOs",
    "TvOS",
    "Game Consoles",
    "ePaper devices",
    "We target more OS's but outside of RN. ",
    "Linux",
    "Remotion",
    "I would like to deploy to web and desktop but is not usable for now, not a real electron alternative",
    "Apple watch",
    "Linux with rn web and electron"
  ],
  "rn2022__react_native_specific_features__react_native_features_performance_profile_other__others": [
    "I would love to be able to use Flipper again but it's been broken for ages with use_frameworks!",
    "shopify/react-native-performance",
    "Hermes profiler, react devtools profiler",
    "reassure",
    "android-performance-profiler",
    "Android Studio Memory Consumption tool",
    "why-did-you-render",
    "Chrome Performance Insights",
    "https://github.com/bamlab/android-performance-profiler",
    "Performance tools need better UIs associated with them.",
    "Intel vTune, PlayStation Razor, cachegrind ",
    "Chrome‚Äôs profiler tab",
    "React Developer Tools (Profiler)",
    "Firebase stats",
    "I also use the Chrome profiler"
  ],
  "rn2022__resources__resources_surveys_other__others": [
    "Digital Ocean Currents",
    "React one I think ",
    "State of react"
  ],
  "rn2022__react_native_specific_features__react_native_features_mobile_web_code_sharing_other__others": [
    "we share swr hooks and axios functions",
    "This is where react native does not shine. We should have a similar way of working between web and native. In the native part, we should able to use html preventing from disrupting code between environments. ",
    "WebView for <ContentEditable /> rich-text editor",
    ".web.ts + .native.ts extensions (not sure it's part of \"common business logic, independent UI components\")",
    "Shared UI system design; analytics; and some other libraries common to both platforms.",
    "Expo Web with RNW",
    "Expo web",
    "Tried to get this working but ran into a hell of a time with workspaces.  The whole set up was very fragile with things constantly complaining about version numbers and failing to compile in either the web or native package.  Very frustrating.",
    "Code sharing with React Native feels like you don't get the best of either platform",
    "react-native-web is the reason we stick with react-native"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_testing_other__others": [
    "MSW",
    "Chromatic",
    "Cucumber",
    "react native owl",
    "Webdriver.io ",
    "Love detox and maestro looks super promising. Sadly right now appium is the only one I know of that can run tests on an actual iOS device. ",
    "Waldo",
    "testing visual regression using a custom solution with reg-viz",
    "react-hooks-testing-library, faker-js",
    "Moropo (private alpha)",
    "Cypress",
    "React Native Owl",
    "Enzyme",
    "Robot Framework",
    "cavy",
    "Maestro: Heard of it, would like to learn",
    "fast-check"
  ],
  "rn2022__monorepo_tools__monorepo_tools_other__others": [
    "Would love a turbo repo solution ",
    "rnx-kit",
    "git-submodule",
    "lage"
  ],
  "rn2022__about_you__about_you_how_you_know": [
    "This week in react newsletter",
    "Reddit",
    "This Week in React",
    "my manager sent it to a group",
    "S√©bastien Lorber newsletter",
    "React Hebdo",
    "twitter ",
    "Linked post",
    "linkedin",
    "Ukrainian React Native Chat in Telegram",
    "Software Mansion github page when looking for something else",
    "Colleague advice",
    "in telegram chat",
    "Sebastien Lorber newsletter",
    "This week in react",
    "rocket seat newsletter",
    "S√©bastien Lorber social networks",
    "Email from  S√©bastien Lorber / site thisweekinreact.com",
    "This Week In React Newsletter",
    "This Week In React",
    "Krzysztof Magiera",
    "mailing list",
    "good",
    "This week in React newsletter ",
    "Sebastien Lorber Newsletter",
    "it's all over the place :P",
    "ThisWeekInReact.com",
    "reddit",
    "React Hebdo - Sebastien Lorber",
    "Sebastian Lorber newsletter",
    "Linkedin ",
    "@sebastienlorber twitter",
    "twitter post",
    "react-native twitter community",
    "React Hebdo newsletter",
    "Good!",
    "I found in twitter because i follow some of the best react native developers",
    "https://twitter.com/swmansion",
    "too long",
    "Sebastien Lorbier Twitter",
    "Learned about libraries I didn't know existed.",
    "this newsletter https://twitter.com/sebastienlorber/status/1610635758137663490",
    "Browsing the repositories of software-mansion",
    " S√©bastien Lorber",
    "Public group in Telegram",
    "from thisweekinreact.com",
    "From https://thisweekinreact.com/ newsletter",
    "Coworker",
    "LinkedIn",
    "I'm looking forward to see the results.",
    "From colleagues",
    "Great but a bit long",
    "S√©bastien lorber ",
    "Fine",
    "Senior shared with me ",
    "Newsletter (thisweekinreact.com)",
    "Coworkers",
    "twitter tweet",
    "From a coworker",
    "WhatsApp group ",
    "I follow software mansion",
    "Twitter",
    "Sebastien Lorber's twitter",
    "Long but interesting ",
    "Evan Bacon twitter ",
    "Online surfing",
    "Slack of my company ; Sebastian Lorber Newsletter",
    "Evan Bacon twitter",
    "Twitter by Expo folks",
    "Tweet",
    "bacon twitter",
    "Software Mansion",
    " Evan Bacon on Twitter",
    "Sebastian Lorber",
    "LinkedIn ",
    "the Software Mansion newsletter",
    "evans bacon twitter",
    "newsletter",
    "Great",
    "DevCaf√© youtube",
    "Dev caf√© youtube channel",
    "Mail",
    "Newsletter",
    "In a youtube channel video (DevCaf√©)",
    "Friend from work shared it on our channel with other react native devs",
    "React Hebdo Newsletter",
    "Very helpful hopefully to improve RNs direction and future",
    "Our CEO",
    "by Evan Bacon from Expo team.",
    "from colleague",
    "Good",
    "Relevant questions",
    "Evan Bacon on Twitter",
    "twitter",
    "Collegue talk about it and give me the link",
    "S√©bastien Lorber ReactHebdo",
    "I followed SWM in twiter ",
    "Coworker (Jamon Holmgren)",
    "Bacon",
    "Software Mansion Twitter post",
    "I've created it",
    "This week in React newsletter",
    "Twitter.com",
    "Software mansion",
    "From Twitter account @wmansion",
    "Evan Bacons twitter post",
    "Callstack",
    "üëç ",
    "Not sure anymore!",
    "Social media, email marketing",
    "Software Mansion :)",
    "Nice with a lot of proposals on all the prisms concerning React Native",
    "Email",
    "email",
    "Posted in Slack by another dev",
    "@gregoirevda is my twitter handle too lazy to login ",
    "Useful",
    "I work at SWM",
    "twitrer",
    "Received email",
    "Software mansion twitter",
    "https://twitter.com/Baconbrix/status/1606162233242750976",
    "A colleague shared ",
    "i made this",
    "S√©bastien Lorber Newsletter",
    "twitter, this week in react newsletter",
    "S√©bastien Lorber",
    "At my company",
    "Twitter ",
    "Shared in a local Slack group",
    "Evan bacon's twitter",
    "Coworker posted",
    "Twittter I think",
    "Twitter, GitHub, Software Mansion, Evan Bacon",
    "Callstack Twitter ",
    "EVAN BACON ON TWITTER",
    "In State of Js",
    "CEO",
    "It was so great! I even haven't heard of some libraries :) I got to know them.",
    "Shared on LinkedIn ",
    "swmansion Twitter",
    "React Native Squad Telegram",
    "I subscribe to Software Mansion",
    "Through LinkedIn",
    "utah react native slack",
    "Found it in the React Native Sqad",
    "Follows Software Mansion. So got email",
    "twtr",
    "dk",
    "Saw link of survey from twitter",
    "big expo fan!",
    "A collegue of mine",
    "Sebastien Lorber's newsletter",
    "Tamagui",
    "evan bacon",
    "From twitter | https://thisweekinreact.com/newsletter | github",
    "From email",
    "Evan ü•ì ",
    "SWM Twitter Account",
    "Andrei Calazans tweet",
    "Colleague posted it",
    "Expo team ( Evan's Twitter)",
    "It was nice, can't wait to see the output of it",
    "Evan bacon tweet",
    "from twitter",
    "From twitter",
    "Software Mansion twitter",
    "seems like a good place to get handy resources for all aspects of mobile application development, dedicated for react-native. .",
    "This Week In React newsletter",
    "Whatsapp group",
    "Software mansion's twitter page",
    "evan bacon tweet",
    "Twitter, Email etc",
    "e-mail",
    "everything nice",
    "From some newsletter",
    "react hebdo by sebastien lorbier",
    "Following Bacon ",
    "Our Ukraine community",
    "Sebastien Lorber",
    "From @tsapeta on Twitter",
    "Good job on getting the ball rolling! Happy to see this initiative being kickstarted.",
    "Colleague",
    "Through Twitter (Software Mansion Team)",
    "Catalin Miron Twitter",
    "From a friend at work",
    "Posted in a work related channel on Slack",
    "From your twitter"
  ],
  "rn2022__about_you__about_you_what_to_improve": [
    "something like typeform ",
    "it looks fine",
    "N/A",
    "It's pretty good I'd say",
    "Is fine as it is",
    "Would be nice if it was a bit shorter, but I understand the complexity.",
    "Adding a dark mode",
    "Allow general comments on some pages.",
    "make it shorter",
    "Way to long, nearly dropped off. Your Likert scales were weird the one with emojis often didn‚Äôt know what to pick. ",
    "i want to add my email after selecting guest, but  i can't any more lol, was impressed with the survey question, i will add here please notify me when the result is out, okanlawonemmanuel41@gmail.com",
    "Please try yearly survey of Flutter, it has more technical focused questions",
    "This is so detailed",
    "-",
    "add a textarea to write abouy what we want from react native team.",
    "Pretty good survey",
    "No question asked related to the development environment like VSCode or its available extensions for react native.",
    "Some questions could only have one answer. For example, the question about what version of react i use. If I work on multiple projects they all aren‚Äôt on the same version",
    "Less questions",
    "More comparison to other tools ? ",
    "Shorten it",
    "Nothing ",
    "Show some screenshots or hints for each package you list, helps jog the memory",
    "Some explanation to stuff like what things are or some images (collapsible) would be appreciated. I could very well google them but I wanna end the survey as fast as possible instead of pondering on what new feature is in the market now. ",
    "Its fine",
    "Years of experience question needs an option for 1-2 years exp",
    "Reach more react native developer",
    "toooo long",
    "This survey is great, but I would be really great to maybe have some popular options to questions about blogs, websites, communities and people. But it‚Äôs not a big deal",
    "All good",
    "Include bogus technology names to weed out bad data",
    "less questions",
    "Add \"Heard of it but don't know what it is\" option hehe!",
    "Separate surveys per sections. Having them all together implies the single developer is involved in all aspects of the app developement ex. Areas in QA DevOps ",
    "Better form buttons. Some of the multi-select options get a bit long. For the ‚Äúversion of React Native‚Äù I wasn‚Äôt sure and had to look up whatever Expo was on. ",
    "Reduce unpopular options (a few)",
    "It was very easy to use, congrats :)",
    "is long but cool",
    "Progressbar",
    "Awesome survey except for some percentages now showing 100%",
    "Make it shorter.",
    "Going correct way",
    "It's perfect",
    "Links to resources",
    "Iterate over questions; add new more accurate questions that better resembles current state of React Native; remove too niche questions; mobilize community to join the content creation process; engage more people in work on next year edition",
    "the first part about the developer background was a bit confusing, I could not specify that I work both professionally and on personal projects (hobby) using RN and it asks about team size and number of users, which will be different between professional and hobbyst projects. I could also not specify that I use macOS for work and Windows for my personal  projects. Perhaps these questions could have been multiple choices.",
    "Use smaller padding between answers",
    "Add disclaimer and when result will be relsase",
    "it's ok",
    "make \"would use again\" the first option!",
    "Man, that is a lot of questions, I gave up.  ",
    "It's already perfect.",
    "Go on",
    "Too many questions ",
    "Seemed good to me üëç",
    "Some memes/photos would be great",
    ".",
    "show results after finish survey",
    "Give anything you want to improve to Expo team",
    "Unsure",
    "less freeform questions, include more tools",
    "It was great, thank you for putting it together! However, I do think MobX should have been included in the state management section :)",
    "its ok",
    "It's fine!",
    "it is very cool) ",
    "\"Used it, not gonna",
    "It‚Äôs been great to see many things I don‚Äôt know about, maybe some links to the subjects and libraries mentioned in the options",
    "Improving UI",
    "Answers were lost few times before I could go to next section and send request from form to save my answers. It was look like re-renders with losing input state or reload of the page",
    "Add MobX as option for state management ;)",
    "It's good",
    "Less free form ",
    "magic login went to spam",
    "you're doing great üëç it took me ~30 mins to fill, so maybe there's a way to shorten it a bit? but dunno. ",
    "All is well at the moment",
    "I think the option answers can be improved ",
    "<3",
    "less freeform answers :) ",
    "more dynamic",
    "Looks good as-is!",
    "The options for \"Heard of, not interested\", \"Used, would use again\", etc type of questions are not inclusive of the reality of use cases. For example, the implication behind \"Heard of, want to learn\" is not the same as \"Heard of, need to know more before I decide if I want to learn or use it\".",
    "You did well ",
    "Select button UI",
    "Shorter",
    "Make it more obvious what this survey is for, that is why people are answering it. But good otherwise (Y)",
    "Literally nothing to improve",
    "yes, for some questions I do not have any answers, maybe it's better to add a new option to ignore or something like that",
    "Sometimes I don‚Äôt have any opinion, for which I don‚Äôt feel there‚Äôs an option in most questions"
  ]
}