{
  "dataAPI": {
    "surveys": {
      "state_of_react_native": {
        "rn2024": {
          "state_management": {
            "state_management_experience": [
              {
                "id": "state_management_jotai",
                "entity": {
                  "name": "Jotai",
                  "nameClean": "Jotai",
                  "entityType": "library",
                  "description": "A state management solution that takes an atomic approach to global React state management. Build state by combining atoms and renders are automatically optimized based on atom dependency.",
                  "descriptionClean": "A state management solution that takes an atomic approach to global React state management. Build state by combining atoms and renders are automatically optimized based on atom dependency.",
                  "homepage": {
                    "url": "https://jotai.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const valueAtom = atom(0)\n\nfunction Counter() {\n  const [value, setValue] = useAtom(animeAtom)\n  const increment = setValue((v) => v + 1)\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> valueAtom = <span class=\"hljs-title function_\">atom</span>(<span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useAtom</span>(animeAtom)\n  <span class=\"hljs-keyword\">const</span> increment = <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> v + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 9
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.64,
                      "interest": 0.57,
                      "usage": 0.15,
                      "retention": 0.94,
                      "positivity": 0.17
                    },
                    "buckets": [
                      {
                        "count": 852,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 752,
                            "id": "neutral",
                            "percentageBucket": 88.26,
                            "percentageQuestion": 30.79,
                            "percentageSurvey": 21.47
                          },
                          {
                            "count": 40,
                            "id": "negative",
                            "percentageBucket": 4.69,
                            "percentageQuestion": 1.64,
                            "percentageSurvey": 1.14
                          },
                          {
                            "count": 60,
                            "id": "positive",
                            "percentageBucket": 7.04,
                            "percentageQuestion": 2.46,
                            "percentageSurvey": 1.71
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 34.89,
                        "percentageSurvey": 24.33
                      },
                      {
                        "count": 1184,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 177,
                            "id": "positive",
                            "percentageBucket": 14.95,
                            "percentageQuestion": 7.25,
                            "percentageSurvey": 5.05
                          },
                          {
                            "count": 875,
                            "id": "neutral",
                            "percentageBucket": 73.9,
                            "percentageQuestion": 35.83,
                            "percentageSurvey": 24.99
                          },
                          {
                            "count": 132,
                            "id": "negative",
                            "percentageBucket": 11.15,
                            "percentageQuestion": 5.41,
                            "percentageSurvey": 3.77
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 48.48,
                        "percentageSurvey": 33.81
                      },
                      {
                        "count": 385,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 198,
                            "id": "positive",
                            "percentageBucket": 51.43,
                            "percentageQuestion": 8.11,
                            "percentageSurvey": 5.65
                          },
                          {
                            "count": 12,
                            "id": "negative",
                            "percentageBucket": 3.12,
                            "percentageQuestion": 0.49,
                            "percentageSurvey": 0.34
                          },
                          {
                            "count": 175,
                            "id": "neutral",
                            "percentageBucket": 45.45,
                            "percentageQuestion": 7.17,
                            "percentageSurvey": 5
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 15.77,
                        "percentageSurvey": 10.99
                      }
                    ],
                    "completion": {
                      "count": 2442,
                      "percentageSurvey": 69.73,
                      "total": 3502
                    }
                  }
                }
              },
              {
                "id": "state_management_legend_state",
                "entity": {
                  "name": "Legend State",
                  "nameClean": "Legend State",
                  "entityType": "library",
                  "description": "A state management solution that provides extremely fast signal-based state with fine-grained reactivity and a powerful sync system that works with any backend.",
                  "descriptionClean": "A state management solution that provides extremely fast signal-based state with fine-grained reactivity and a powerful sync system that works with any backend.",
                  "homepage": {
                    "url": "https://legendapp.com/open-source/state/"
                  },
                  "example": {
                    "language": "js",
                    "code": "const counter = observable({ value: 0 })\n\nconst Counter = observer(() => {\n  const value = counter.value.use()\n  const increment = () => counter.value.set((v) => v + 1)\n  // ...\n})\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> counter = <span class=\"hljs-title function_\">observable</span>({ <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> })\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Counter</span> = <span class=\"hljs-title function_\">observer</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> value = counter.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">use</span>()\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; counter.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> v + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// ...</span>\n})"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 6
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.31,
                      "interest": 0.65,
                      "usage": 0.04,
                      "retention": 0,
                      "positivity": 0.09
                    },
                    "buckets": [
                      {
                        "count": 1669,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 1434,
                            "id": "neutral",
                            "percentageBucket": 85.92,
                            "percentageQuestion": 59.06,
                            "percentageSurvey": 40.95
                          },
                          {
                            "count": 111,
                            "id": "negative",
                            "percentageBucket": 6.65,
                            "percentageQuestion": 4.57,
                            "percentageSurvey": 3.17
                          },
                          {
                            "count": 124,
                            "id": "positive",
                            "percentageBucket": 7.43,
                            "percentageQuestion": 5.11,
                            "percentageSurvey": 3.54
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 68.74,
                        "percentageSurvey": 47.66
                      },
                      {
                        "count": 657,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 478,
                            "id": "neutral",
                            "percentageBucket": 72.75,
                            "percentageQuestion": 19.69,
                            "percentageSurvey": 13.65
                          },
                          {
                            "count": 117,
                            "id": "positive",
                            "percentageBucket": 17.81,
                            "percentageQuestion": 4.82,
                            "percentageSurvey": 3.34
                          },
                          {
                            "count": 62,
                            "id": "negative",
                            "percentageBucket": 9.44,
                            "percentageQuestion": 2.55,
                            "percentageSurvey": 1.77
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 27.06,
                        "percentageSurvey": 18.76
                      },
                      {
                        "count": 97,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 47,
                            "id": "neutral",
                            "percentageBucket": 48.45,
                            "percentageQuestion": 1.94,
                            "percentageSurvey": 1.34
                          },
                          {
                            "count": 50,
                            "id": "insufficient_data",
                            "percentageBucket": 52
                          }
                        ],
                        "percentageQuestion": 4,
                        "percentageSurvey": 2.77
                      }
                    ],
                    "completion": {
                      "count": 2428,
                      "percentageSurvey": 69.33,
                      "total": 3502
                    }
                  }
                }
              },
              {
                "id": "state_management_mobx",
                "entity": {
                  "name": "MobX",
                  "nameClean": "MobX",
                  "entityType": "library",
                  "description": "A signal-based state management library that makes state management simple and scalable by transparently applying functional reactive programming.",
                  "descriptionClean": "A signal-based state management library that makes state management simple and scalable by transparently applying functional reactive programming.",
                  "homepage": {
                    "url": "https://mobx.js.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const counter = observable({ value: 0 })\n\nconst Counter = observer(() => {\n  const value = counter.value\n  const increment = () => counter.value++\n  // ...\n})\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> counter = <span class=\"hljs-title function_\">observable</span>({ <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> })\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Counter</span> = <span class=\"hljs-title function_\">observer</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> value = counter.<span class=\"hljs-property\">value</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; counter.<span class=\"hljs-property\">value</span>++\n  <span class=\"hljs-comment\">// ...</span>\n})"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 8
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.79,
                      "interest": 0.2,
                      "usage": 0.17,
                      "retention": 0.61,
                      "positivity": 0.08
                    },
                    "buckets": [
                      {
                        "count": 495,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 19,
                            "id": "negative",
                            "percentageBucket": 3.84,
                            "percentageQuestion": 0.78,
                            "percentageSurvey": 0.54
                          },
                          {
                            "count": 24,
                            "id": "positive",
                            "percentageBucket": 4.85,
                            "percentageQuestion": 0.99,
                            "percentageSurvey": 0.69
                          },
                          {
                            "count": 452,
                            "id": "neutral",
                            "percentageBucket": 91.31,
                            "percentageQuestion": 18.61,
                            "percentageSurvey": 12.91
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 20.38,
                        "percentageSurvey": 14.13
                      },
                      {
                        "count": 1503,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 67,
                            "id": "positive",
                            "percentageBucket": 4.46,
                            "percentageQuestion": 2.76,
                            "percentageSurvey": 1.91
                          },
                          {
                            "count": 263,
                            "id": "negative",
                            "percentageBucket": 17.5,
                            "percentageQuestion": 10.83,
                            "percentageSurvey": 7.51
                          },
                          {
                            "count": 1173,
                            "id": "neutral",
                            "percentageBucket": 78.04,
                            "percentageQuestion": 48.29,
                            "percentageSurvey": 33.5
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 61.88,
                        "percentageSurvey": 42.92
                      },
                      {
                        "count": 419,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 244,
                            "id": "neutral",
                            "percentageBucket": 58.23,
                            "percentageQuestion": 10.05,
                            "percentageSurvey": 6.97
                          },
                          {
                            "count": 107,
                            "id": "positive",
                            "percentageBucket": 25.54,
                            "percentageQuestion": 4.41,
                            "percentageSurvey": 3.06
                          },
                          {
                            "count": 68,
                            "id": "negative",
                            "percentageBucket": 16.23,
                            "percentageQuestion": 2.8,
                            "percentageSurvey": 1.94
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 17.25,
                        "percentageSurvey": 11.96
                      }
                    ],
                    "completion": {
                      "count": 2429,
                      "percentageSurvey": 69.36,
                      "total": 3502
                    }
                  }
                }
              },
              {
                "id": "state_management_mobx_state_tree",
                "entity": {
                  "name": "MobX State Tree",
                  "nameClean": "MobX State Tree",
                  "entityType": "library",
                  "description": "A state container system built on top of MobX. MobX is a state management \"engine\", and MobX-State-Tree gives it structure and common tools you need for your app.",
                  "descriptionClean": "A state container system built on top of MobX. MobX is a state management \"engine\", and MobX-State-Tree gives it structure and common tools you need for your app.",
                  "descriptionHtml": "A state container system built on top of MobX. MobX is a state management \"engine\", and MobX-State-Tree gives it structure and common tools you need for your app.",
                  "homepage": {
                    "url": "https://mobx-state-tree.js.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const model = t\n  .model('counter', { value: t.number })\n  .actions((self) => ({ increment() { self.value++ }))\n\nconst counter = model.create({ value: 0 })\n\nfunction Counter() {\n  const value = counter.value\n  const increment = counter.increment\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> model = t\n  .<span class=\"hljs-title function_\">model</span>(<span class=\"hljs-string\">&#x27;counter&#x27;</span>, { <span class=\"hljs-attr\">value</span>: t.<span class=\"hljs-property\">number</span> })\n  .<span class=\"hljs-title function_\">actions</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">self</span>) =&gt;</span> ({ <span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\"></span>) { self.<span class=\"hljs-property\">value</span>++ }))\n\n<span class=\"hljs-keyword\">const</span> counter = model.<span class=\"hljs-title function_\">create</span>({ <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> })\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> value = counter.<span class=\"hljs-property\">value</span>\n  <span class=\"hljs-keyword\">const</span> increment = counter.<span class=\"hljs-property\">increment</span>\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 7
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.57,
                      "interest": 0.22,
                      "usage": 0.1,
                      "retention": 0.59,
                      "positivity": 0.05
                    },
                    "buckets": [
                      {
                        "count": 1033,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 28,
                            "id": "positive",
                            "percentageBucket": 2.71,
                            "percentageQuestion": 1.16,
                            "percentageSurvey": 0.8
                          },
                          {
                            "count": 90,
                            "id": "negative",
                            "percentageBucket": 8.71,
                            "percentageQuestion": 3.73,
                            "percentageSurvey": 2.57
                          },
                          {
                            "count": 915,
                            "id": "neutral",
                            "percentageBucket": 88.58,
                            "percentageQuestion": 37.94,
                            "percentageSurvey": 26.13
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 42.83,
                        "percentageSurvey": 29.5
                      },
                      {
                        "count": 1130,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 56,
                            "id": "positive",
                            "percentageBucket": 4.96,
                            "percentageQuestion": 2.32,
                            "percentageSurvey": 1.6
                          },
                          {
                            "count": 188,
                            "id": "negative",
                            "percentageBucket": 16.64,
                            "percentageQuestion": 7.79,
                            "percentageSurvey": 5.37
                          },
                          {
                            "count": 886,
                            "id": "neutral",
                            "percentageBucket": 78.41,
                            "percentageQuestion": 36.73,
                            "percentageSurvey": 25.3
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 46.85,
                        "percentageSurvey": 32.27
                      },
                      {
                        "count": 245,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 146,
                            "id": "neutral",
                            "percentageBucket": 59.59,
                            "percentageQuestion": 6.05,
                            "percentageSurvey": 4.17
                          },
                          {
                            "count": 59,
                            "id": "positive",
                            "percentageBucket": 24.08,
                            "percentageQuestion": 2.45,
                            "percentageSurvey": 1.68
                          },
                          {
                            "count": 40,
                            "id": "negative",
                            "percentageBucket": 16.33,
                            "percentageQuestion": 1.66,
                            "percentageSurvey": 1.14
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 10.16,
                        "percentageSurvey": 7
                      }
                    ],
                    "completion": {
                      "count": 2412,
                      "percentageSurvey": 68.87,
                      "total": 3502
                    }
                  }
                }
              },
              {
                "id": "state_management_rn_built_in",
                "entity": {
                  "name": "React built-ins",
                  "nameClean": "React built-ins",
                  "entityType": "library",
                  "description": "The most basic primitives for \"remembering\" the state of the React component.",
                  "descriptionClean": "The most basic primitives for \"remembering\" the state of the React component.",
                  "descriptionHtml": "The most basic primitives for \"remembering\" the state of the React component.",
                  "homepage": {
                    "url": "https://react.dev/reference/react/hooks"
                  },
                  "example": {
                    "language": "js",
                    "code": "function Counter() {\n  const [value, setValue] = useState(0)\n  const increment = () => setValue((v) => v + 1)\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> v + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 10
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.94,
                      "interest": 0,
                      "usage": 0.91,
                      "retention": 0.94,
                      "positivity": 0.3
                    },
                    "buckets": [
                      {
                        "count": 133,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 122,
                            "id": "neutral",
                            "percentageBucket": 91.73,
                            "percentageQuestion": 5.01,
                            "percentageSurvey": 3.48
                          },
                          {
                            "count": 11,
                            "id": "insufficient_data",
                            "percentageBucket": 8
                          }
                        ],
                        "percentageQuestion": 5.46,
                        "percentageSurvey": 3.8
                      },
                      {
                        "count": 65,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 52,
                            "id": "neutral",
                            "percentageBucket": 80,
                            "percentageQuestion": 2.14,
                            "percentageSurvey": 1.48
                          },
                          {
                            "count": 13,
                            "id": "insufficient_data",
                            "percentageBucket": 20
                          }
                        ],
                        "percentageQuestion": 2.67,
                        "percentageSurvey": 1.86
                      },
                      {
                        "count": 2227,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 1441,
                            "id": "neutral",
                            "percentageBucket": 64.71,
                            "percentageQuestion": 59.2,
                            "percentageSurvey": 41.15
                          },
                          {
                            "count": 745,
                            "id": "positive",
                            "percentageBucket": 33.45,
                            "percentageQuestion": 30.61,
                            "percentageSurvey": 21.27
                          },
                          {
                            "count": 41,
                            "id": "negative",
                            "percentageBucket": 1.84,
                            "percentageQuestion": 1.68,
                            "percentageSurvey": 1.17
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 91.5,
                        "percentageSurvey": 63.59
                      }
                    ],
                    "completion": {
                      "count": 2434,
                      "percentageSurvey": 69.5,
                      "total": 3502
                    }
                  }
                }
              },
              {
                "id": "state_management_recoil",
                "entity": {
                  "name": "Recoil",
                  "nameClean": "Recoil",
                  "entityType": "library",
                  "description": "An experimental state management library that lets you create a data-flow graph that flows from atoms (shared state) through selectors (pure functions) and down into your React components.",
                  "descriptionClean": "An experimental state management library that lets you create a data-flow graph that flows from atoms (shared state) through selectors (pure functions) and down into your React components.",
                  "homepage": {
                    "url": "https://recoiljs.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const state = atom({ key: 'counter', default: 0 })\n\nfunction Counter() {\n  const [value, setValue] = useRecoilState(state)\n  const increment = () => setValue(v => v + 1)\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> state = <span class=\"hljs-title function_\">atom</span>({ <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;counter&#x27;</span>, <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span> })\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useRecoilState</span>(state)\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> v + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 5
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.59,
                      "interest": 0.29,
                      "usage": 0.09,
                      "retention": 0.65,
                      "positivity": 0.06
                    },
                    "buckets": [
                      {
                        "count": 973,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 55,
                            "id": "negative",
                            "percentageBucket": 5.65,
                            "percentageQuestion": 2.29,
                            "percentageSurvey": 1.57
                          },
                          {
                            "count": 31,
                            "id": "positive",
                            "percentageBucket": 3.19,
                            "percentageQuestion": 1.29,
                            "percentageSurvey": 0.89
                          },
                          {
                            "count": 887,
                            "id": "neutral",
                            "percentageBucket": 91.16,
                            "percentageQuestion": 36.93,
                            "percentageSurvey": 25.33
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 40.51,
                        "percentageSurvey": 27.78
                      },
                      {
                        "count": 1197,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 923,
                            "id": "neutral",
                            "percentageBucket": 77.11,
                            "percentageQuestion": 38.43,
                            "percentageSurvey": 26.36
                          },
                          {
                            "count": 193,
                            "id": "negative",
                            "percentageBucket": 16.12,
                            "percentageQuestion": 8.03,
                            "percentageSurvey": 5.51
                          },
                          {
                            "count": 81,
                            "id": "positive",
                            "percentageBucket": 6.77,
                            "percentageQuestion": 3.37,
                            "percentageSurvey": 2.31
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 49.83,
                        "percentageSurvey": 34.18
                      },
                      {
                        "count": 226,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 26,
                            "id": "negative",
                            "percentageBucket": 11.5,
                            "percentageQuestion": 1.08,
                            "percentageSurvey": 0.74
                          },
                          {
                            "count": 50,
                            "id": "positive",
                            "percentageBucket": 22.12,
                            "percentageQuestion": 2.08,
                            "percentageSurvey": 1.43
                          },
                          {
                            "count": 150,
                            "id": "neutral",
                            "percentageBucket": 66.37,
                            "percentageQuestion": 6.24,
                            "percentageSurvey": 4.28
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 9.41,
                        "percentageSurvey": 6.45
                      }
                    ],
                    "completion": {
                      "count": 2402,
                      "percentageSurvey": 68.59,
                      "total": 3502
                    }
                  }
                }
              },
              {
                "id": "state_management_redux",
                "entity": {
                  "name": "Redux",
                  "nameClean": "Redux",
                  "entityType": "library",
                  "description": "A predictable state container based on unidirectional data flow and immutable state updates.",
                  "descriptionClean": "A predictable state container based on unidirectional data flow and immutable state updates.",
                  "homepage": {
                    "url": "https://redux.js.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "function reducer(state = { value: 0 }, action) {\n  switch (action.type) {\n    case 'increment':\n      return { value: state.value + 1 }\n    default:\n      return state\n  }\n}\nconst store = createStore(reducer)\n\nfunction Counter() {\n  const value = useSelector((state) => state.value)\n  const dispatch = useDispatch()\n  const increment = dispatch({ type: 'increment' })\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">reducer</span>(<span class=\"hljs-params\">state = { value: <span class=\"hljs-number\">0</span> }, action</span>) {\n  <span class=\"hljs-keyword\">switch</span> (action.<span class=\"hljs-property\">type</span>) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;increment&#x27;</span>:\n      <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">value</span>: state.<span class=\"hljs-property\">value</span> + <span class=\"hljs-number\">1</span> }\n    <span class=\"hljs-attr\">default</span>:\n      <span class=\"hljs-keyword\">return</span> state\n  }\n}\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">createStore</span>(reducer)\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">value</span>)\n  <span class=\"hljs-keyword\">const</span> dispatch = <span class=\"hljs-title function_\">useDispatch</span>()\n  <span class=\"hljs-keyword\">const</span> increment = <span class=\"hljs-title function_\">dispatch</span>({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;increment&#x27;</span> })\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 25
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.97,
                      "interest": 0.16,
                      "usage": 0.71,
                      "retention": 0.39,
                      "positivity": 0.12
                    },
                    "buckets": [
                      {
                        "count": 49,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 44,
                            "id": "neutral",
                            "percentageBucket": 89.8,
                            "percentageQuestion": 1.8,
                            "percentageSurvey": 1.26
                          },
                          {
                            "count": 5,
                            "id": "insufficient_data",
                            "percentageBucket": 10
                          }
                        ],
                        "percentageQuestion": 2.01,
                        "percentageSurvey": 1.4
                      },
                      {
                        "count": 632,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 24,
                            "id": "positive",
                            "percentageBucket": 3.8,
                            "percentageQuestion": 0.98,
                            "percentageSurvey": 0.69
                          },
                          {
                            "count": 123,
                            "id": "negative",
                            "percentageBucket": 19.46,
                            "percentageQuestion": 5.04,
                            "percentageSurvey": 3.51
                          },
                          {
                            "count": 485,
                            "id": "neutral",
                            "percentageBucket": 76.74,
                            "percentageQuestion": 19.88,
                            "percentageSurvey": 13.85
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 25.9,
                        "percentageSurvey": 18.05
                      },
                      {
                        "count": 1733,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 1028,
                            "id": "neutral",
                            "percentageBucket": 59.32,
                            "percentageQuestion": 42.13,
                            "percentageSurvey": 29.35
                          },
                          {
                            "count": 278,
                            "id": "positive",
                            "percentageBucket": 16.04,
                            "percentageQuestion": 11.39,
                            "percentageSurvey": 7.94
                          },
                          {
                            "count": 427,
                            "id": "negative",
                            "percentageBucket": 24.64,
                            "percentageQuestion": 17.5,
                            "percentageSurvey": 12.19
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 71.02,
                        "percentageSurvey": 49.49
                      }
                    ],
                    "completion": {
                      "count": 2440,
                      "percentageSurvey": 69.67,
                      "total": 3502
                    }
                  }
                }
              },
              {
                "id": "state_management_redux_toolkit",
                "entity": {
                  "name": "Redux Toolkit",
                  "nameClean": "Redux Toolkit",
                  "entityType": "library",
                  "description": "The official, opinionated, batteries-included toolset for efficient Redux development.",
                  "descriptionClean": "The official, opinionated, batteries-included toolset for efficient Redux development.",
                  "homepage": {
                    "url": "https://redux-toolkit.js.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const slice = createSlice({\n  name: 'counter',\n  initialState: { value: 0 },\n  reducers: {\n    increment: (state) => { state.value++ },\n  },\n})\n\nconst store = configureStore({ reducer: slice.reducer })\n\nfunction Counter() {\n  const value = useSelector((state) => state.value)\n  const dispatch = useDispatch()\n  const increment = () => dispatch(counterSlice.actions.increment())\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> slice = <span class=\"hljs-title function_\">createSlice</span>({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;counter&#x27;</span>,\n  <span class=\"hljs-attr\">initialState</span>: { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> },\n  <span class=\"hljs-attr\">reducers</span>: {\n    <span class=\"hljs-attr\">increment</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> { state.<span class=\"hljs-property\">value</span>++ },\n  },\n})\n\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">configureStore</span>({ <span class=\"hljs-attr\">reducer</span>: slice.<span class=\"hljs-property\">reducer</span> })\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">value</span>)\n  <span class=\"hljs-keyword\">const</span> dispatch = <span class=\"hljs-title function_\">useDispatch</span>()\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">dispatch</span>(counterSlice.<span class=\"hljs-property\">actions</span>.<span class=\"hljs-title function_\">increment</span>())\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 13
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.92,
                      "interest": 0.27,
                      "usage": 0.61,
                      "retention": 0.66,
                      "positivity": 0.17
                    },
                    "buckets": [
                      {
                        "count": 176,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 159,
                            "id": "neutral",
                            "percentageBucket": 90.34,
                            "percentageQuestion": 6.57,
                            "percentageSurvey": 4.54
                          },
                          {
                            "count": 17,
                            "id": "insufficient_data",
                            "percentageBucket": 10
                          }
                        ],
                        "percentageQuestion": 7.27,
                        "percentageSurvey": 5.03
                      },
                      {
                        "count": 759,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 44,
                            "id": "positive",
                            "percentageBucket": 5.8,
                            "percentageQuestion": 1.82,
                            "percentageSurvey": 1.26
                          },
                          {
                            "count": 117,
                            "id": "negative",
                            "percentageBucket": 15.42,
                            "percentageQuestion": 4.83,
                            "percentageSurvey": 3.34
                          },
                          {
                            "count": 598,
                            "id": "neutral",
                            "percentageBucket": 78.79,
                            "percentageQuestion": 24.7,
                            "percentageSurvey": 17.08
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 31.35,
                        "percentageSurvey": 21.67
                      },
                      {
                        "count": 1479,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 897,
                            "id": "neutral",
                            "percentageBucket": 60.65,
                            "percentageQuestion": 37.05,
                            "percentageSurvey": 25.61
                          },
                          {
                            "count": 193,
                            "id": "negative",
                            "percentageBucket": 13.05,
                            "percentageQuestion": 7.97,
                            "percentageSurvey": 5.51
                          },
                          {
                            "count": 389,
                            "id": "positive",
                            "percentageBucket": 26.3,
                            "percentageQuestion": 16.07,
                            "percentageSurvey": 11.11
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 61.09,
                        "percentageSurvey": 42.23
                      }
                    ],
                    "completion": {
                      "count": 2421,
                      "percentageSurvey": 69.13,
                      "total": 3502
                    }
                  }
                }
              },
              {
                "id": "state_management_xstate",
                "entity": {
                  "name": "XState",
                  "nameClean": "XState",
                  "entityType": "library",
                  "description": "A powerful and flexible way to manage application and workflow state by allowing developers to model logic as actors and state machines.",
                  "descriptionClean": "A powerful and flexible way to manage application and workflow state by allowing developers to model logic as actors and state machines.",
                  "homepage": {
                    "url": "https://stately.ai/docs/xstate"
                  },
                  "example": {
                    "language": "js",
                    "code": "const machine = createMachine({\n  initial: 'active',\n  context: {\n    value: 0,\n  },\n  states: {\n    active: {\n      on: {\n        INCREMENT: {\n          actions: assign({\n            value: (context) => context.value + 1 })\n          }\n        }\n      }\n    }\n  }\n})\n\nfunction Counter() {\n  const [snapshot, send] = useMachine(machine)\n  const value = snapshot.context.value\n  const increment = () => send('INCREMENT')\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> machine = <span class=\"hljs-title function_\">createMachine</span>({\n  <span class=\"hljs-attr\">initial</span>: <span class=\"hljs-string\">&#x27;active&#x27;</span>,\n  <span class=\"hljs-attr\">context</span>: {\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span>,\n  },\n  <span class=\"hljs-attr\">states</span>: {\n    <span class=\"hljs-attr\">active</span>: {\n      <span class=\"hljs-attr\">on</span>: {\n        <span class=\"hljs-attr\">INCREMENT</span>: {\n          <span class=\"hljs-attr\">actions</span>: <span class=\"hljs-title function_\">assign</span>({\n            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">context</span>) =&gt;</span> context.<span class=\"hljs-property\">value</span> + <span class=\"hljs-number\">1</span> })\n          }\n        }\n      }\n    }\n  }\n})\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [snapshot, send] = <span class=\"hljs-title function_\">useMachine</span>(machine)\n  <span class=\"hljs-keyword\">const</span> value = snapshot.<span class=\"hljs-property\">context</span>.<span class=\"hljs-property\">value</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&#x27;INCREMENT&#x27;</span>)\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 12
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.44,
                      "interest": 0.47,
                      "usage": 0.08,
                      "retention": 0.59,
                      "positivity": 0.07
                    },
                    "buckets": [
                      {
                        "count": 1320,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 1185,
                            "id": "neutral",
                            "percentageBucket": 89.77,
                            "percentageQuestion": 49.69,
                            "percentageSurvey": 33.84
                          },
                          {
                            "count": 107,
                            "id": "negative",
                            "percentageBucket": 8.11,
                            "percentageQuestion": 4.49,
                            "percentageSurvey": 3.06
                          },
                          {
                            "count": 28,
                            "id": "positive",
                            "percentageBucket": 2.12,
                            "percentageQuestion": 1.17,
                            "percentageSurvey": 0.8
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 55.35,
                        "percentageSurvey": 37.69
                      },
                      {
                        "count": 866,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 645,
                            "id": "neutral",
                            "percentageBucket": 74.48,
                            "percentageQuestion": 27.04,
                            "percentageSurvey": 18.42
                          },
                          {
                            "count": 104,
                            "id": "positive",
                            "percentageBucket": 12.01,
                            "percentageQuestion": 4.36,
                            "percentageSurvey": 2.97
                          },
                          {
                            "count": 117,
                            "id": "negative",
                            "percentageBucket": 13.51,
                            "percentageQuestion": 4.91,
                            "percentageSurvey": 3.34
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 36.31,
                        "percentageSurvey": 24.73
                      },
                      {
                        "count": 194,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 115,
                            "id": "neutral",
                            "percentageBucket": 59.28,
                            "percentageQuestion": 4.82,
                            "percentageSurvey": 3.28
                          },
                          {
                            "count": 47,
                            "id": "positive",
                            "percentageBucket": 24.23,
                            "percentageQuestion": 1.97,
                            "percentageSurvey": 1.34
                          },
                          {
                            "count": 32,
                            "id": "negative",
                            "percentageBucket": 16.49,
                            "percentageQuestion": 1.34,
                            "percentageSurvey": 0.91
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 8.13,
                        "percentageSurvey": 5.54
                      }
                    ],
                    "completion": {
                      "count": 2385,
                      "percentageSurvey": 68.1,
                      "total": 3502
                    }
                  }
                }
              },
              {
                "id": "state_management_zustand",
                "entity": {
                  "name": "Zustand",
                  "nameClean": "Zustand",
                  "entityType": "library",
                  "description": "A small, fast, and scalable bearbones state management solution that isn't boilerplatey or opinionated, but has enough convention to be explicit and flux-like.",
                  "descriptionClean": "A small, fast, and scalable bearbones state management solution that isn't boilerplatey or opinionated, but has enough convention to be explicit and flux-like.",
                  "descriptionHtml": "A small, fast, and scalable bearbones state management solution that isn't boilerplatey or opinionated, but has enough convention to be explicit and flux-like.",
                  "homepage": {
                    "url": "https://zustand-demo.pmnd.rs"
                  },
                  "example": {
                    "language": "js",
                    "code": "const useStore = create((set) => ({\n  count: 0,\n  increment: () => set((state) => ({ count: state.count + 1 })),\n}))\n\nfunction Counter() {\n  const { count, increment } = useStore()\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> useStore = <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">set</span>) =&gt;</span> ({\n  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attr\">increment</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> ({ <span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span> })),\n}))\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> { count, increment } = <span class=\"hljs-title function_\">useStore</span>()\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 19
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.85,
                      "interest": 0.79,
                      "usage": 0.46,
                      "retention": 0.95,
                      "positivity": 0.29
                    },
                    "buckets": [
                      {
                        "count": 351,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 22,
                            "id": "negative",
                            "percentageBucket": 6.27,
                            "percentageQuestion": 0.91,
                            "percentageSurvey": 0.63
                          },
                          {
                            "count": 14,
                            "id": "positive",
                            "percentageBucket": 3.99,
                            "percentageQuestion": 0.58,
                            "percentageSurvey": 0.4
                          },
                          {
                            "count": 315,
                            "id": "neutral",
                            "percentageBucket": 89.74,
                            "percentageQuestion": 13.05,
                            "percentageSurvey": 8.99
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 14.55,
                        "percentageSurvey": 10.02
                      },
                      {
                        "count": 924,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 703,
                            "id": "neutral",
                            "percentageBucket": 76.08,
                            "percentageQuestion": 29.13,
                            "percentageSurvey": 20.07
                          },
                          {
                            "count": 45,
                            "id": "negative",
                            "percentageBucket": 4.87,
                            "percentageQuestion": 1.86,
                            "percentageSurvey": 1.28
                          },
                          {
                            "count": 176,
                            "id": "positive",
                            "percentageBucket": 19.05,
                            "percentageQuestion": 7.29,
                            "percentageSurvey": 5.03
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 38.29,
                        "percentageSurvey": 26.38
                      },
                      {
                        "count": 1128,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 22,
                            "id": "negative",
                            "percentageBucket": 1.95,
                            "percentageQuestion": 0.91,
                            "percentageSurvey": 0.63
                          },
                          {
                            "count": 515,
                            "id": "positive",
                            "percentageBucket": 45.66,
                            "percentageQuestion": 21.34,
                            "percentageSurvey": 14.71
                          },
                          {
                            "count": 591,
                            "id": "neutral",
                            "percentageBucket": 52.39,
                            "percentageQuestion": 24.49,
                            "percentageSurvey": 16.88
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 46.75,
                        "percentageSurvey": 32.21
                      }
                    ],
                    "completion": {
                      "count": 2413,
                      "percentageSurvey": 68.9,
                      "total": 3502
                    }
                  }
                }
              }
            ]
          }
        }
      }
    }
  }
}