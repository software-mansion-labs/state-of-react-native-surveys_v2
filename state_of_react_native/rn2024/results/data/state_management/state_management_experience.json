{
  "dataAPI": {
    "surveys": {
      "state_of_react_native": {
        "rn2024": {
          "state_management": {
            "state_management_experience": [
              {
                "id": "state_management_jotai",
                "entity": {
                  "name": "Jotai",
                  "nameClean": "Jotai",
                  "entityType": "library",
                  "description": "A state management solution that takes an atomic approach to global React state management. Build state by combining atoms and renders are automatically optimized based on atom dependency.",
                  "descriptionClean": "A state management solution that takes an atomic approach to global React state management. Build state by combining atoms and renders are automatically optimized based on atom dependency.",
                  "homepage": {
                    "url": "https://jotai.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const valueAtom = atom(0)\n\nfunction Counter() {\n  const [value, setValue] = useAtom(animeAtom)\n  const increment = setValue((v) => v + 1)\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> valueAtom = <span class=\"hljs-title function_\">atom</span>(<span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useAtom</span>(animeAtom)\n  <span class=\"hljs-keyword\">const</span> increment = <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> v + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 5
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.66,
                      "interest": 0.56,
                      "usage": 0.17,
                      "retention": 0.93,
                      "positivity": 0.18
                    },
                    "buckets": [
                      {
                        "count": 625,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 36,
                            "id": "negative",
                            "percentageBucket": 5.76,
                            "percentageQuestion": 1.9,
                            "percentageSurvey": 1.34
                          },
                          {
                            "count": 38,
                            "id": "positive",
                            "percentageBucket": 6.08,
                            "percentageQuestion": 2.01,
                            "percentageSurvey": 1.42
                          },
                          {
                            "count": 551,
                            "id": "neutral",
                            "percentageBucket": 88.16,
                            "percentageQuestion": 29.15,
                            "percentageSurvey": 20.56
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 33.07,
                        "percentageSurvey": 23.32
                      },
                      {
                        "count": 928,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 689,
                            "id": "neutral",
                            "percentageBucket": 74.25,
                            "percentageQuestion": 36.46,
                            "percentageSurvey": 25.71
                          },
                          {
                            "count": 135,
                            "id": "positive",
                            "percentageBucket": 14.55,
                            "percentageQuestion": 7.14,
                            "percentageSurvey": 5.04
                          },
                          {
                            "count": 104,
                            "id": "negative",
                            "percentageBucket": 11.21,
                            "percentageQuestion": 5.5,
                            "percentageSurvey": 3.88
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 49.1,
                        "percentageSurvey": 34.63
                      },
                      {
                        "count": 320,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 166,
                            "id": "positive",
                            "percentageBucket": 51.88,
                            "percentageQuestion": 8.78,
                            "percentageSurvey": 6.19
                          },
                          {
                            "count": 11,
                            "id": "negative",
                            "percentageBucket": 3.44,
                            "percentageQuestion": 0.58,
                            "percentageSurvey": 0.41
                          },
                          {
                            "count": 143,
                            "id": "neutral",
                            "percentageBucket": 44.69,
                            "percentageQuestion": 7.57,
                            "percentageSurvey": 5.34
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 16.93,
                        "percentageSurvey": 11.94
                      }
                    ],
                    "completion": {
                      "count": 1890,
                      "percentageSurvey": 70.52,
                      "total": 2680
                    }
                  }
                }
              },
              {
                "id": "state_management_legend_state",
                "entity": {
                  "name": "Legend State",
                  "nameClean": "Legend State",
                  "entityType": "library",
                  "description": "A state management solution that provides extremely fast signal-based state with fine-grained reactivity and a powerful sync system that works with any backend.",
                  "descriptionClean": "A state management solution that provides extremely fast signal-based state with fine-grained reactivity and a powerful sync system that works with any backend.",
                  "homepage": {
                    "url": "https://legendapp.com/open-source/state/"
                  },
                  "example": {
                    "language": "js",
                    "code": "const counter = observable({ value: 0 })\n\nconst Counter = observer(() => {\n  const value = counter.value.use()\n  const increment = () => counter.value.set((v) => v + 1)\n  // ...\n})\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> counter = <span class=\"hljs-title function_\">observable</span>({ <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> })\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Counter</span> = <span class=\"hljs-title function_\">observer</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> value = counter.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">use</span>()\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; counter.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> v + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// ...</span>\n})"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 5
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.33,
                      "interest": 0.65,
                      "usage": 0.03,
                      "retention": 1,
                      "positivity": 0.11
                    },
                    "buckets": [
                      {
                        "count": 1253,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 86,
                            "id": "negative",
                            "percentageBucket": 6.86,
                            "percentageQuestion": 4.58,
                            "percentageSurvey": 3.21
                          },
                          {
                            "count": 89,
                            "id": "positive",
                            "percentageBucket": 7.1,
                            "percentageQuestion": 4.74,
                            "percentageSurvey": 3.32
                          },
                          {
                            "count": 1078,
                            "id": "neutral",
                            "percentageBucket": 86.03,
                            "percentageQuestion": 57.43,
                            "percentageSurvey": 40.22
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 66.76,
                        "percentageSurvey": 46.75
                      },
                      {
                        "count": 549,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 400,
                            "id": "neutral",
                            "percentageBucket": 72.86,
                            "percentageQuestion": 21.31,
                            "percentageSurvey": 14.93
                          },
                          {
                            "count": 52,
                            "id": "negative",
                            "percentageBucket": 9.47,
                            "percentageQuestion": 2.77,
                            "percentageSurvey": 1.94
                          },
                          {
                            "count": 97,
                            "id": "positive",
                            "percentageBucket": 17.67,
                            "percentageQuestion": 5.17,
                            "percentageSurvey": 3.62
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 29.25,
                        "percentageSurvey": 20.49
                      },
                      {
                        "count": 71,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 37,
                            "id": "positive",
                            "percentageBucket": 52.11,
                            "percentageQuestion": 1.97,
                            "percentageSurvey": 1.38
                          },
                          {
                            "count": 34,
                            "id": "insufficient_data",
                            "percentageBucket": 48
                          }
                        ],
                        "percentageQuestion": 3.78,
                        "percentageSurvey": 2.65
                      }
                    ],
                    "completion": {
                      "count": 1877,
                      "percentageSurvey": 70.04,
                      "total": 2680
                    }
                  }
                }
              },
              {
                "id": "state_management_mobx",
                "entity": {
                  "name": "MobX",
                  "nameClean": "MobX",
                  "entityType": "library",
                  "description": "A signal-based state management library that makes state management simple and scalable by transparently applying functional reactive programming.",
                  "descriptionClean": "A signal-based state management library that makes state management simple and scalable by transparently applying functional reactive programming.",
                  "homepage": {
                    "url": "https://mobx.js.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const counter = observable({ value: 0 })\n\nconst Counter = observer(() => {\n  const value = counter.value\n  const increment = () => counter.value++\n  // ...\n})\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> counter = <span class=\"hljs-title function_\">observable</span>({ <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> })\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Counter</span> = <span class=\"hljs-title function_\">observer</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> value = counter.<span class=\"hljs-property\">value</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; counter.<span class=\"hljs-property\">value</span>++\n  <span class=\"hljs-comment\">// ...</span>\n})"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 7
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.81,
                      "interest": 0.2,
                      "usage": 0.17,
                      "retention": 0.59,
                      "positivity": 0.08
                    },
                    "buckets": [
                      {
                        "count": 352,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 14,
                            "id": "negative",
                            "percentageBucket": 3.98,
                            "percentageQuestion": 0.74,
                            "percentageSurvey": 0.52
                          },
                          {
                            "count": 15,
                            "id": "positive",
                            "percentageBucket": 4.26,
                            "percentageQuestion": 0.8,
                            "percentageSurvey": 0.56
                          },
                          {
                            "count": 323,
                            "id": "neutral",
                            "percentageBucket": 91.76,
                            "percentageQuestion": 17.16,
                            "percentageSurvey": 12.05
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 18.7,
                        "percentageSurvey": 13.13
                      },
                      {
                        "count": 1187,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 55,
                            "id": "positive",
                            "percentageBucket": 4.63,
                            "percentageQuestion": 2.92,
                            "percentageSurvey": 2.05
                          },
                          {
                            "count": 211,
                            "id": "negative",
                            "percentageBucket": 17.78,
                            "percentageQuestion": 11.21,
                            "percentageSurvey": 7.87
                          },
                          {
                            "count": 921,
                            "id": "neutral",
                            "percentageBucket": 77.59,
                            "percentageQuestion": 48.94,
                            "percentageSurvey": 34.37
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 63.07,
                        "percentageSurvey": 44.29
                      },
                      {
                        "count": 332,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 82,
                            "id": "positive",
                            "percentageBucket": 24.7,
                            "percentageQuestion": 4.36,
                            "percentageSurvey": 3.06
                          },
                          {
                            "count": 194,
                            "id": "neutral",
                            "percentageBucket": 58.43,
                            "percentageQuestion": 10.31,
                            "percentageSurvey": 7.24
                          },
                          {
                            "count": 56,
                            "id": "negative",
                            "percentageBucket": 16.87,
                            "percentageQuestion": 2.98,
                            "percentageSurvey": 2.09
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 17.64,
                        "percentageSurvey": 12.39
                      }
                    ],
                    "completion": {
                      "count": 1882,
                      "percentageSurvey": 70.22,
                      "total": 2680
                    }
                  }
                }
              },
              {
                "id": "state_management_mobx_state_tree",
                "entity": {
                  "name": "MobX State Tree",
                  "nameClean": "MobX State Tree",
                  "entityType": "library",
                  "description": "A state container system built on top of MobX. MobX is a state management \"engine\", and MobX-State-Tree gives it structure and common tools you need for your app.",
                  "descriptionClean": "A state container system built on top of MobX. MobX is a state management \"engine\", and MobX-State-Tree gives it structure and common tools you need for your app.",
                  "descriptionHtml": "A state container system built on top of MobX. MobX is a state management \"engine\", and MobX-State-Tree gives it structure and common tools you need for your app.",
                  "homepage": {
                    "url": "https://mobx-state-tree.js.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const model = t\n  .model('counter', { value: t.number })\n  .actions((self) => ({ increment() { self.value++ }))\n\nconst counter = model.create({ value: 0 })\n\nfunction Counter() {\n  const value = counter.value\n  const increment = counter.increment\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> model = t\n  .<span class=\"hljs-title function_\">model</span>(<span class=\"hljs-string\">&#x27;counter&#x27;</span>, { <span class=\"hljs-attr\">value</span>: t.<span class=\"hljs-property\">number</span> })\n  .<span class=\"hljs-title function_\">actions</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">self</span>) =&gt;</span> ({ <span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\"></span>) { self.<span class=\"hljs-property\">value</span>++ }))\n\n<span class=\"hljs-keyword\">const</span> counter = model.<span class=\"hljs-title function_\">create</span>({ <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> })\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> value = counter.<span class=\"hljs-property\">value</span>\n  <span class=\"hljs-keyword\">const</span> increment = counter.<span class=\"hljs-property\">increment</span>\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 7
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.58,
                      "interest": 0.22,
                      "usage": 0.1,
                      "retention": 0.63,
                      "positivity": 0.05
                    },
                    "buckets": [
                      {
                        "count": 764,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 677,
                            "id": "neutral",
                            "percentageBucket": 88.61,
                            "percentageQuestion": 36.28,
                            "percentageSurvey": 25.26
                          },
                          {
                            "count": 15,
                            "id": "positive",
                            "percentageBucket": 1.96,
                            "percentageQuestion": 0.8,
                            "percentageSurvey": 0.56
                          },
                          {
                            "count": 72,
                            "id": "negative",
                            "percentageBucket": 9.42,
                            "percentageQuestion": 3.86,
                            "percentageSurvey": 2.69
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 40.94,
                        "percentageSurvey": 28.51
                      },
                      {
                        "count": 908,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 43,
                            "id": "positive",
                            "percentageBucket": 4.74,
                            "percentageQuestion": 2.3,
                            "percentageSurvey": 1.6
                          },
                          {
                            "count": 151,
                            "id": "negative",
                            "percentageBucket": 16.63,
                            "percentageQuestion": 8.09,
                            "percentageSurvey": 5.63
                          },
                          {
                            "count": 714,
                            "id": "neutral",
                            "percentageBucket": 78.63,
                            "percentageQuestion": 38.26,
                            "percentageSurvey": 26.64
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 48.66,
                        "percentageSurvey": 33.88
                      },
                      {
                        "count": 190,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 114,
                            "id": "neutral",
                            "percentageBucket": 60,
                            "percentageQuestion": 6.11,
                            "percentageSurvey": 4.25
                          },
                          {
                            "count": 48,
                            "id": "positive",
                            "percentageBucket": 25.26,
                            "percentageQuestion": 2.57,
                            "percentageSurvey": 1.79
                          },
                          {
                            "count": 28,
                            "id": "negative",
                            "percentageBucket": 14.74,
                            "percentageQuestion": 1.5,
                            "percentageSurvey": 1.04
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 10.18,
                        "percentageSurvey": 7.09
                      }
                    ],
                    "completion": {
                      "count": 1866,
                      "percentageSurvey": 69.63,
                      "total": 2680
                    }
                  }
                }
              },
              {
                "id": "state_management_rn_built_in",
                "entity": {
                  "name": "React built-ins",
                  "nameClean": "React built-ins",
                  "entityType": "library",
                  "description": "The most basic primitives for \"remembering\" the state of the React component.",
                  "descriptionClean": "The most basic primitives for \"remembering\" the state of the React component.",
                  "descriptionHtml": "The most basic primitives for \"remembering\" the state of the React component.",
                  "homepage": {
                    "url": "https://react.dev/reference/react/hooks"
                  },
                  "example": {
                    "language": "js",
                    "code": "function Counter() {\n  const [value, setValue] = useState(0)\n  const increment = () => setValue((v) => v + 1)\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> v + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 8
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.94,
                      "interest": 0,
                      "usage": 0.92,
                      "retention": 0.94,
                      "positivity": 0.31
                    },
                    "buckets": [
                      {
                        "count": 100,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 92,
                            "id": "neutral",
                            "percentageBucket": 92,
                            "percentageQuestion": 4.88,
                            "percentageSurvey": 3.43
                          },
                          {
                            "count": 8,
                            "id": "insufficient_data",
                            "percentageBucket": 8
                          }
                        ],
                        "percentageQuestion": 5.31,
                        "percentageSurvey": 3.73
                      },
                      {
                        "count": 44,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 33,
                            "id": "neutral",
                            "percentageBucket": 75,
                            "percentageQuestion": 1.75,
                            "percentageSurvey": 1.23
                          },
                          {
                            "count": 11,
                            "id": "insufficient_data",
                            "percentageBucket": 25
                          }
                        ],
                        "percentageQuestion": 2.34,
                        "percentageSurvey": 1.64
                      },
                      {
                        "count": 1733,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 584,
                            "id": "positive",
                            "percentageBucket": 33.7,
                            "percentageQuestion": 31,
                            "percentageSurvey": 21.79
                          },
                          {
                            "count": 32,
                            "id": "negative",
                            "percentageBucket": 1.85,
                            "percentageQuestion": 1.7,
                            "percentageSurvey": 1.19
                          },
                          {
                            "count": 1117,
                            "id": "neutral",
                            "percentageBucket": 64.45,
                            "percentageQuestion": 59.29,
                            "percentageSurvey": 41.68
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 91.99,
                        "percentageSurvey": 64.66
                      }
                    ],
                    "completion": {
                      "count": 1884,
                      "percentageSurvey": 70.3,
                      "total": 2680
                    }
                  }
                }
              },
              {
                "id": "state_management_recoil",
                "entity": {
                  "name": "Recoil",
                  "nameClean": "Recoil",
                  "entityType": "library",
                  "description": "An experimental state management library that lets you create a data-flow graph that flows from atoms (shared state) through selectors (pure functions) and down into your React components.",
                  "descriptionClean": "An experimental state management library that lets you create a data-flow graph that flows from atoms (shared state) through selectors (pure functions) and down into your React components.",
                  "homepage": {
                    "url": "https://recoiljs.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const state = atom({ key: 'counter', default: 0 })\n\nfunction Counter() {\n  const [value, setValue] = useRecoilState(state)\n  const increment = () => setValue(v => v + 1)\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> state = <span class=\"hljs-title function_\">atom</span>({ <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;counter&#x27;</span>, <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span> })\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useRecoilState</span>(state)\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> v + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 5
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.6,
                      "interest": 0.28,
                      "usage": 0.09,
                      "retention": 0.61,
                      "positivity": 0.06
                    },
                    "buckets": [
                      {
                        "count": 735,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 672,
                            "id": "neutral",
                            "percentageBucket": 91.43,
                            "percentageQuestion": 36.15,
                            "percentageSurvey": 25.07
                          },
                          {
                            "count": 46,
                            "id": "negative",
                            "percentageBucket": 6.26,
                            "percentageQuestion": 2.47,
                            "percentageSurvey": 1.72
                          },
                          {
                            "count": 17,
                            "id": "positive",
                            "percentageBucket": 2.31,
                            "percentageQuestion": 0.91,
                            "percentageSurvey": 0.63
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 39.54,
                        "percentageSurvey": 27.43
                      },
                      {
                        "count": 950,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 728,
                            "id": "neutral",
                            "percentageBucket": 76.63,
                            "percentageQuestion": 39.16,
                            "percentageSurvey": 27.16
                          },
                          {
                            "count": 158,
                            "id": "negative",
                            "percentageBucket": 16.63,
                            "percentageQuestion": 8.5,
                            "percentageSurvey": 5.9
                          },
                          {
                            "count": 64,
                            "id": "positive",
                            "percentageBucket": 6.74,
                            "percentageQuestion": 3.44,
                            "percentageSurvey": 2.39
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 51.1,
                        "percentageSurvey": 35.45
                      },
                      {
                        "count": 170,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 21,
                            "id": "negative",
                            "percentageBucket": 12.35,
                            "percentageQuestion": 1.13,
                            "percentageSurvey": 0.78
                          },
                          {
                            "count": 34,
                            "id": "positive",
                            "percentageBucket": 20,
                            "percentageQuestion": 1.83,
                            "percentageSurvey": 1.27
                          },
                          {
                            "count": 115,
                            "id": "neutral",
                            "percentageBucket": 67.65,
                            "percentageQuestion": 6.19,
                            "percentageSurvey": 4.29
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 9.14,
                        "percentageSurvey": 6.34
                      }
                    ],
                    "completion": {
                      "count": 1859,
                      "percentageSurvey": 69.37,
                      "total": 2680
                    }
                  }
                }
              },
              {
                "id": "state_management_redux",
                "entity": {
                  "name": "Redux",
                  "nameClean": "Redux",
                  "entityType": "library",
                  "description": "A predictable state container based on unidirectional data flow and immutable state updates.",
                  "descriptionClean": "A predictable state container based on unidirectional data flow and immutable state updates.",
                  "homepage": {
                    "url": "https://redux.js.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "function reducer(state = { value: 0 }, action) {\n  switch (action.type) {\n    case 'increment':\n      return { value: state.value + 1 }\n    default:\n      return state\n  }\n}\nconst store = createStore(reducer)\n\nfunction Counter() {\n  const value = useSelector((state) => state.value)\n  const dispatch = useDispatch()\n  const increment = dispatch({ type: 'increment' })\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">reducer</span>(<span class=\"hljs-params\">state = { value: <span class=\"hljs-number\">0</span> }, action</span>) {\n  <span class=\"hljs-keyword\">switch</span> (action.<span class=\"hljs-property\">type</span>) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;increment&#x27;</span>:\n      <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">value</span>: state.<span class=\"hljs-property\">value</span> + <span class=\"hljs-number\">1</span> }\n    <span class=\"hljs-attr\">default</span>:\n      <span class=\"hljs-keyword\">return</span> state\n  }\n}\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">createStore</span>(reducer)\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">value</span>)\n  <span class=\"hljs-keyword\">const</span> dispatch = <span class=\"hljs-title function_\">useDispatch</span>()\n  <span class=\"hljs-keyword\">const</span> increment = <span class=\"hljs-title function_\">dispatch</span>({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;increment&#x27;</span> })\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 18
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.98,
                      "interest": 0.14,
                      "usage": 0.72,
                      "retention": 0.36,
                      "positivity": 0.11
                    },
                    "buckets": [
                      {
                        "count": 26,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 26,
                            "id": "insufficient_data",
                            "percentageBucket": 100
                          }
                        ],
                        "percentageQuestion": 1.38,
                        "percentageSurvey": 0.97
                      },
                      {
                        "count": 489,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 372,
                            "id": "neutral",
                            "percentageBucket": 76.07,
                            "percentageQuestion": 19.77,
                            "percentageSurvey": 13.88
                          },
                          {
                            "count": 17,
                            "id": "positive",
                            "percentageBucket": 3.48,
                            "percentageQuestion": 0.9,
                            "percentageSurvey": 0.63
                          },
                          {
                            "count": 100,
                            "id": "negative",
                            "percentageBucket": 20.45,
                            "percentageQuestion": 5.31,
                            "percentageSurvey": 3.73
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 25.98,
                        "percentageSurvey": 18.25
                      },
                      {
                        "count": 1347,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 804,
                            "id": "neutral",
                            "percentageBucket": 59.69,
                            "percentageQuestion": 42.72,
                            "percentageSurvey": 30
                          },
                          {
                            "count": 343,
                            "id": "negative",
                            "percentageBucket": 25.46,
                            "percentageQuestion": 18.23,
                            "percentageSurvey": 12.8
                          },
                          {
                            "count": 200,
                            "id": "positive",
                            "percentageBucket": 14.85,
                            "percentageQuestion": 10.63,
                            "percentageSurvey": 7.46
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 71.57,
                        "percentageSurvey": 50.26
                      }
                    ],
                    "completion": {
                      "count": 1882,
                      "percentageSurvey": 70.22,
                      "total": 2680
                    }
                  }
                }
              },
              {
                "id": "state_management_redux_toolkit",
                "entity": {
                  "name": "Redux Toolkit",
                  "nameClean": "Redux Toolkit",
                  "entityType": "library",
                  "description": "The official, opinionated, batteries-included toolset for efficient Redux development.",
                  "descriptionClean": "The official, opinionated, batteries-included toolset for efficient Redux development.",
                  "homepage": {
                    "url": "https://redux-toolkit.js.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const slice = createSlice({\n  name: 'counter',\n  initialState: { value: 0 },\n  reducers: {\n    increment: (state) => { state.value++ },\n  },\n})\n\nconst store = configureStore({ reducer: slice.reducer })\n\nfunction Counter() {\n  const value = useSelector((state) => state.value)\n  const dispatch = useDispatch()\n  const increment = () => dispatch(counterSlice.actions.increment())\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> slice = <span class=\"hljs-title function_\">createSlice</span>({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;counter&#x27;</span>,\n  <span class=\"hljs-attr\">initialState</span>: { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> },\n  <span class=\"hljs-attr\">reducers</span>: {\n    <span class=\"hljs-attr\">increment</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> { state.<span class=\"hljs-property\">value</span>++ },\n  },\n})\n\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">configureStore</span>({ <span class=\"hljs-attr\">reducer</span>: slice.<span class=\"hljs-property\">reducer</span> })\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">value</span>)\n  <span class=\"hljs-keyword\">const</span> dispatch = <span class=\"hljs-title function_\">useDispatch</span>()\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">dispatch</span>(counterSlice.<span class=\"hljs-property\">actions</span>.<span class=\"hljs-title function_\">increment</span>())\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 9
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.93,
                      "interest": 0.25,
                      "usage": 0.61,
                      "retention": 0.65,
                      "positivity": 0.17
                    },
                    "buckets": [
                      {
                        "count": 121,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 109,
                            "id": "neutral",
                            "percentageBucket": 90.08,
                            "percentageQuestion": 5.84,
                            "percentageSurvey": 4.07
                          },
                          {
                            "count": 12,
                            "id": "insufficient_data",
                            "percentageBucket": 10
                          }
                        ],
                        "percentageQuestion": 6.48,
                        "percentageSurvey": 4.51
                      },
                      {
                        "count": 597,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 33,
                            "id": "positive",
                            "percentageBucket": 5.53,
                            "percentageQuestion": 1.77,
                            "percentageSurvey": 1.23
                          },
                          {
                            "count": 95,
                            "id": "negative",
                            "percentageBucket": 15.91,
                            "percentageQuestion": 5.09,
                            "percentageSurvey": 3.54
                          },
                          {
                            "count": 469,
                            "id": "neutral",
                            "percentageBucket": 78.56,
                            "percentageQuestion": 25.12,
                            "percentageSurvey": 17.5
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 31.98,
                        "percentageSurvey": 22.28
                      },
                      {
                        "count": 1145,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 698,
                            "id": "neutral",
                            "percentageBucket": 60.96,
                            "percentageQuestion": 37.39,
                            "percentageSurvey": 26.04
                          },
                          {
                            "count": 155,
                            "id": "negative",
                            "percentageBucket": 13.54,
                            "percentageQuestion": 8.3,
                            "percentageSurvey": 5.78
                          },
                          {
                            "count": 292,
                            "id": "positive",
                            "percentageBucket": 25.5,
                            "percentageQuestion": 15.64,
                            "percentageSurvey": 10.9
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 61.33,
                        "percentageSurvey": 42.72
                      }
                    ],
                    "completion": {
                      "count": 1867,
                      "percentageSurvey": 69.66,
                      "total": 2680
                    }
                  }
                }
              },
              {
                "id": "state_management_xstate",
                "entity": {
                  "name": "XState",
                  "nameClean": "XState",
                  "entityType": "library",
                  "description": "A powerful and flexible way to manage application and workflow state by allowing developers to model logic as actors and state machines.",
                  "descriptionClean": "A powerful and flexible way to manage application and workflow state by allowing developers to model logic as actors and state machines.",
                  "homepage": {
                    "url": "https://stately.ai/docs/xstate"
                  },
                  "example": {
                    "language": "js",
                    "code": "const machine = createMachine({\n  initial: 'active',\n  context: {\n    value: 0,\n  },\n  states: {\n    active: {\n      on: {\n        INCREMENT: {\n          actions: assign({\n            value: (context) => context.value + 1 })\n          }\n        }\n      }\n    }\n  }\n})\n\nfunction Counter() {\n  const [snapshot, send] = useMachine(machine)\n  const value = snapshot.context.value\n  const increment = () => send('INCREMENT')\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> machine = <span class=\"hljs-title function_\">createMachine</span>({\n  <span class=\"hljs-attr\">initial</span>: <span class=\"hljs-string\">&#x27;active&#x27;</span>,\n  <span class=\"hljs-attr\">context</span>: {\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span>,\n  },\n  <span class=\"hljs-attr\">states</span>: {\n    <span class=\"hljs-attr\">active</span>: {\n      <span class=\"hljs-attr\">on</span>: {\n        <span class=\"hljs-attr\">INCREMENT</span>: {\n          <span class=\"hljs-attr\">actions</span>: <span class=\"hljs-title function_\">assign</span>({\n            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">context</span>) =&gt;</span> context.<span class=\"hljs-property\">value</span> + <span class=\"hljs-number\">1</span> })\n          }\n        }\n      }\n    }\n  }\n})\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [snapshot, send] = <span class=\"hljs-title function_\">useMachine</span>(machine)\n  <span class=\"hljs-keyword\">const</span> value = snapshot.<span class=\"hljs-property\">context</span>.<span class=\"hljs-property\">value</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&#x27;INCREMENT&#x27;</span>)\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 12
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.45,
                      "interest": 0.47,
                      "usage": 0.08,
                      "retention": 0.56,
                      "positivity": 0.07
                    },
                    "buckets": [
                      {
                        "count": 996,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 891,
                            "id": "neutral",
                            "percentageBucket": 89.46,
                            "percentageQuestion": 48.37,
                            "percentageSurvey": 33.25
                          },
                          {
                            "count": 89,
                            "id": "negative",
                            "percentageBucket": 8.94,
                            "percentageQuestion": 4.83,
                            "percentageSurvey": 3.32
                          },
                          {
                            "count": 16,
                            "id": "positive",
                            "percentageBucket": 1.61,
                            "percentageQuestion": 0.87,
                            "percentageSurvey": 0.6
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 54.07,
                        "percentageSurvey": 37.16
                      },
                      {
                        "count": 684,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 80,
                            "id": "positive",
                            "percentageBucket": 11.7,
                            "percentageQuestion": 4.34,
                            "percentageSurvey": 2.99
                          },
                          {
                            "count": 516,
                            "id": "neutral",
                            "percentageBucket": 75.44,
                            "percentageQuestion": 28.01,
                            "percentageSurvey": 19.25
                          },
                          {
                            "count": 88,
                            "id": "negative",
                            "percentageBucket": 12.87,
                            "percentageQuestion": 4.78,
                            "percentageSurvey": 3.28
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 37.13,
                        "percentageSurvey": 25.52
                      },
                      {
                        "count": 159,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 38,
                            "id": "positive",
                            "percentageBucket": 23.9,
                            "percentageQuestion": 2.06,
                            "percentageSurvey": 1.42
                          },
                          {
                            "count": 29,
                            "id": "negative",
                            "percentageBucket": 18.24,
                            "percentageQuestion": 1.57,
                            "percentageSurvey": 1.08
                          },
                          {
                            "count": 92,
                            "id": "neutral",
                            "percentageBucket": 57.86,
                            "percentageQuestion": 4.99,
                            "percentageSurvey": 3.43
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 8.63,
                        "percentageSurvey": 5.93
                      }
                    ],
                    "completion": {
                      "count": 1842,
                      "percentageSurvey": 68.73,
                      "total": 2680
                    }
                  }
                }
              },
              {
                "id": "state_management_zustand",
                "entity": {
                  "name": "Zustand",
                  "nameClean": "Zustand",
                  "entityType": "library",
                  "description": "A small, fast, and scalable bearbones state management solution that isn't boilerplatey or opinionated, but has enough convention to be explicit and flux-like.",
                  "descriptionClean": "A small, fast, and scalable bearbones state management solution that isn't boilerplatey or opinionated, but has enough convention to be explicit and flux-like.",
                  "descriptionHtml": "A small, fast, and scalable bearbones state management solution that isn't boilerplatey or opinionated, but has enough convention to be explicit and flux-like.",
                  "homepage": {
                    "url": "https://zustand-demo.pmnd.rs"
                  },
                  "example": {
                    "language": "js",
                    "code": "const useStore = create((set) => ({\n  count: 0,\n  increment: () => set((state) => ({ count: state.count + 1 })),\n}))\n\nfunction Counter() {\n  const { count, increment } = useStore()\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> useStore = <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">set</span>) =&gt;</span> ({\n  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attr\">increment</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> ({ <span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span> })),\n}))\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> { count, increment } = <span class=\"hljs-title function_\">useStore</span>()\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 18
                  }
                },
                "responses": {
                  "currentEdition": {
                    "ratios": {
                      "awareness": 0.87,
                      "interest": 0.81,
                      "usage": 0.47,
                      "retention": 0.96,
                      "positivity": 0.29
                    },
                    "buckets": [
                      {
                        "count": 236,
                        "id": "never_heard",
                        "facetBuckets": [
                          {
                            "count": 14,
                            "id": "negative",
                            "percentageBucket": 5.93,
                            "percentageQuestion": 0.75,
                            "percentageSurvey": 0.52
                          },
                          {
                            "count": 10,
                            "id": "positive",
                            "percentageBucket": 4.24,
                            "percentageQuestion": 0.54,
                            "percentageSurvey": 0.37
                          },
                          {
                            "count": 212,
                            "id": "neutral",
                            "percentageBucket": 89.83,
                            "percentageQuestion": 11.36,
                            "percentageSurvey": 7.91
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 12.65,
                        "percentageSurvey": 8.81
                      },
                      {
                        "count": 735,
                        "id": "heard",
                        "facetBuckets": [
                          {
                            "count": 556,
                            "id": "neutral",
                            "percentageBucket": 75.65,
                            "percentageQuestion": 29.8,
                            "percentageSurvey": 20.75
                          },
                          {
                            "count": 33,
                            "id": "negative",
                            "percentageBucket": 4.49,
                            "percentageQuestion": 1.77,
                            "percentageSurvey": 1.23
                          },
                          {
                            "count": 146,
                            "id": "positive",
                            "percentageBucket": 19.86,
                            "percentageQuestion": 7.82,
                            "percentageSurvey": 5.45
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 39.39,
                        "percentageSurvey": 27.43
                      },
                      {
                        "count": 887,
                        "id": "used",
                        "facetBuckets": [
                          {
                            "count": 391,
                            "id": "positive",
                            "percentageBucket": 44.08,
                            "percentageQuestion": 20.95,
                            "percentageSurvey": 14.59
                          },
                          {
                            "count": 15,
                            "id": "negative",
                            "percentageBucket": 1.69,
                            "percentageQuestion": 0.8,
                            "percentageSurvey": 0.56
                          },
                          {
                            "count": 481,
                            "id": "neutral",
                            "percentageBucket": 54.23,
                            "percentageQuestion": 25.78,
                            "percentageSurvey": 17.95
                          },
                          {
                            "count": 0,
                            "id": "insufficient_data",
                            "percentageBucket": 0
                          }
                        ],
                        "percentageQuestion": 47.53,
                        "percentageSurvey": 33.1
                      }
                    ],
                    "completion": {
                      "count": 1866,
                      "percentageSurvey": 69.63,
                      "total": 2680
                    }
                  }
                }
              }
            ]
          }
        }
      }
    }
  }
}