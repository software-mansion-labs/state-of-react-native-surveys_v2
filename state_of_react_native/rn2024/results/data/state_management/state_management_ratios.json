{
  "dataAPI": {
    "surveys": {
      "state_of_react_native": {
        "rn2024": {
          "state_management": {
            "state_management_ratios": [
              {
                "id": "state_management_jotai",
                "entity": {
                  "name": "Jotai",
                  "nameClean": "Jotai",
                  "entityType": "library",
                  "description": "A state management solution that takes an atomic approach to global React state management. Build state by combining atoms and renders are automatically optimized based on atom dependency.",
                  "descriptionClean": "A state management solution that takes an atomic approach to global React state management. Build state by combining atoms and renders are automatically optimized based on atom dependency.",
                  "homepage": {
                    "url": "https://jotai.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const valueAtom = atom(0)\n\nfunction Counter() {\n  const [value, setValue] = useAtom(animeAtom)\n  const increment = setValue((v) => v + 1)\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> valueAtom = <span class=\"hljs-title function_\">atom</span>(<span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useAtom</span>(animeAtom)\n  <span class=\"hljs-keyword\">const</span> increment = <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> v + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "responses": {
                  "allEditions": [
                    {
                      "year": 2022,
                      "editionId": "rn2022",
                      "ratios": {
                        "awareness": 0.57,
                        "interest": 0.57,
                        "usage": 0.09,
                        "retention": 0.89,
                        "positivity": 0.36
                      },
                      "completion": {
                        "count": 1576,
                        "percentageSurvey": 83.47,
                        "total": 1888
                      }
                    },
                    {
                      "year": 2023,
                      "editionId": "rn2023",
                      "ratios": {
                        "awareness": 0.64,
                        "interest": 0.57,
                        "usage": 0.14,
                        "retention": 0.86,
                        "positivity": 0.4
                      },
                      "completion": {
                        "count": 1983,
                        "percentageSurvey": 82.76,
                        "total": 2396
                      }
                    },
                    {
                      "year": 2024,
                      "editionId": "rn2024",
                      "ratios": {
                        "awareness": 0.64,
                        "interest": 0.57,
                        "usage": 0.15,
                        "retention": 0.94,
                        "positivity": 0.17
                      },
                      "completion": {
                        "count": 2442,
                        "percentageSurvey": 69.73,
                        "total": 3502
                      }
                    }
                  ]
                }
              },
              {
                "id": "state_management_legend_state",
                "entity": {
                  "name": "Legend State",
                  "nameClean": "Legend State",
                  "entityType": "library",
                  "description": "A state management solution that provides extremely fast signal-based state with fine-grained reactivity and a powerful sync system that works with any backend.",
                  "descriptionClean": "A state management solution that provides extremely fast signal-based state with fine-grained reactivity and a powerful sync system that works with any backend.",
                  "homepage": {
                    "url": "https://legendapp.com/open-source/state/"
                  },
                  "example": {
                    "language": "js",
                    "code": "const counter = observable({ value: 0 })\n\nconst Counter = observer(() => {\n  const value = counter.value.use()\n  const increment = () => counter.value.set((v) => v + 1)\n  // ...\n})\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> counter = <span class=\"hljs-title function_\">observable</span>({ <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> })\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Counter</span> = <span class=\"hljs-title function_\">observer</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> value = counter.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">use</span>()\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; counter.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> v + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// ...</span>\n})"
                  }
                },
                "responses": {
                  "allEditions": [
                    {
                      "year": 2024,
                      "editionId": "rn2024",
                      "ratios": {
                        "awareness": 0.31,
                        "interest": 0.65,
                        "usage": 0.04,
                        "retention": 0.92,
                        "positivity": 0.11
                      },
                      "completion": {
                        "count": 2428,
                        "percentageSurvey": 69.33,
                        "total": 3502
                      }
                    }
                  ]
                }
              },
              {
                "id": "state_management_mobx",
                "entity": {
                  "name": "MobX",
                  "nameClean": "MobX",
                  "entityType": "library",
                  "description": "A signal-based state management library that makes state management simple and scalable by transparently applying functional reactive programming.",
                  "descriptionClean": "A signal-based state management library that makes state management simple and scalable by transparently applying functional reactive programming.",
                  "homepage": {
                    "url": "https://mobx.js.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const counter = observable({ value: 0 })\n\nconst Counter = observer(() => {\n  const value = counter.value\n  const increment = () => counter.value++\n  // ...\n})\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> counter = <span class=\"hljs-title function_\">observable</span>({ <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> })\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Counter</span> = <span class=\"hljs-title function_\">observer</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> value = counter.<span class=\"hljs-property\">value</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; counter.<span class=\"hljs-property\">value</span>++\n  <span class=\"hljs-comment\">// ...</span>\n})"
                  }
                },
                "responses": {
                  "allEditions": [
                    {
                      "year": 2023,
                      "editionId": "rn2023",
                      "ratios": {
                        "awareness": 0.83,
                        "interest": 0.38,
                        "usage": 0.19,
                        "retention": 0.59,
                        "positivity": 0.36
                      },
                      "completion": {
                        "count": 1985,
                        "percentageSurvey": 82.85,
                        "total": 2396
                      }
                    },
                    {
                      "year": 2024,
                      "editionId": "rn2024",
                      "ratios": {
                        "awareness": 0.79,
                        "interest": 0.2,
                        "usage": 0.17,
                        "retention": 0.61,
                        "positivity": 0.08
                      },
                      "completion": {
                        "count": 2429,
                        "percentageSurvey": 69.36,
                        "total": 3502
                      }
                    }
                  ]
                }
              },
              {
                "id": "state_management_mobx_state_tree",
                "entity": {
                  "name": "MobX State Tree",
                  "nameClean": "MobX State Tree",
                  "entityType": "library",
                  "description": "A state container system built on top of MobX. MobX is a state management \"engine\", and MobX-State-Tree gives it structure and common tools you need for your app.",
                  "descriptionClean": "A state container system built on top of MobX. MobX is a state management \"engine\", and MobX-State-Tree gives it structure and common tools you need for your app.",
                  "descriptionHtml": "A state container system built on top of MobX. MobX is a state management \"engine\", and MobX-State-Tree gives it structure and common tools you need for your app.",
                  "homepage": {
                    "url": "https://mobx-state-tree.js.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const model = t\n  .model('counter', { value: t.number })\n  .actions((self) => ({ increment() { self.value++ }))\n\nconst counter = model.create({ value: 0 })\n\nfunction Counter() {\n  const value = counter.value\n  const increment = counter.increment\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> model = t\n  .<span class=\"hljs-title function_\">model</span>(<span class=\"hljs-string\">&#x27;counter&#x27;</span>, { <span class=\"hljs-attr\">value</span>: t.<span class=\"hljs-property\">number</span> })\n  .<span class=\"hljs-title function_\">actions</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">self</span>) =&gt;</span> ({ <span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\"></span>) { self.<span class=\"hljs-property\">value</span>++ }))\n\n<span class=\"hljs-keyword\">const</span> counter = model.<span class=\"hljs-title function_\">create</span>({ <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> })\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> value = counter.<span class=\"hljs-property\">value</span>\n  <span class=\"hljs-keyword\">const</span> increment = counter.<span class=\"hljs-property\">increment</span>\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "responses": {
                  "allEditions": [
                    {
                      "year": 2023,
                      "editionId": "rn2023",
                      "ratios": {
                        "awareness": 0.73,
                        "interest": 0.41,
                        "usage": 0.12,
                        "retention": 0.57,
                        "positivity": 0.32
                      },
                      "completion": {
                        "count": 1979,
                        "percentageSurvey": 82.6,
                        "total": 2396
                      }
                    },
                    {
                      "year": 2024,
                      "editionId": "rn2024",
                      "ratios": {
                        "awareness": 0.57,
                        "interest": 0.22,
                        "usage": 0.1,
                        "retention": 0.59,
                        "positivity": 0.05
                      },
                      "completion": {
                        "count": 2412,
                        "percentageSurvey": 68.87,
                        "total": 3502
                      }
                    }
                  ]
                }
              },
              {
                "id": "state_management_rn_built_in",
                "entity": {
                  "name": "React built-ins",
                  "nameClean": "React built-ins",
                  "entityType": "library",
                  "description": "The most basic primitives for \"remembering\" the state of the React component.",
                  "descriptionClean": "The most basic primitives for \"remembering\" the state of the React component.",
                  "descriptionHtml": "The most basic primitives for \"remembering\" the state of the React component.",
                  "homepage": {
                    "url": "https://react.dev/reference/react/hooks"
                  },
                  "example": {
                    "language": "js",
                    "code": "function Counter() {\n  const [value, setValue] = useState(0)\n  const increment = () => setValue((v) => v + 1)\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> v + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "responses": {
                  "allEditions": [
                    {
                      "year": 2022,
                      "editionId": "rn2022",
                      "ratios": {
                        "awareness": 0.99,
                        "interest": 0.64,
                        "usage": 0.96,
                        "retention": 0.97,
                        "positivity": 0.95
                      },
                      "completion": {
                        "count": 1591,
                        "percentageSurvey": 84.27,
                        "total": 1888
                      }
                    },
                    {
                      "year": 2023,
                      "editionId": "rn2023",
                      "ratios": {
                        "awareness": 0.99,
                        "interest": 0.42,
                        "usage": 0.97,
                        "retention": 0.96,
                        "positivity": 0.95
                      },
                      "completion": {
                        "count": 2027,
                        "percentageSurvey": 84.6,
                        "total": 2396
                      }
                    },
                    {
                      "year": 2024,
                      "editionId": "rn2024",
                      "ratios": {
                        "awareness": 0.94,
                        "interest": 0.53,
                        "usage": 0.91,
                        "retention": 0.94,
                        "positivity": 0.31
                      },
                      "completion": {
                        "count": 2434,
                        "percentageSurvey": 69.5,
                        "total": 3502
                      }
                    }
                  ]
                }
              },
              {
                "id": "state_management_recoil",
                "entity": {
                  "name": "Recoil",
                  "nameClean": "Recoil",
                  "entityType": "library",
                  "description": "An experimental state management library that lets you create a data-flow graph that flows from atoms (shared state) through selectors (pure functions) and down into your React components.",
                  "descriptionClean": "An experimental state management library that lets you create a data-flow graph that flows from atoms (shared state) through selectors (pure functions) and down into your React components.",
                  "homepage": {
                    "url": "https://recoiljs.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const state = atom({ key: 'counter', default: 0 })\n\nfunction Counter() {\n  const [value, setValue] = useRecoilState(state)\n  const increment = () => setValue(v => v + 1)\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> state = <span class=\"hljs-title function_\">atom</span>({ <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;counter&#x27;</span>, <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span> })\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useRecoilState</span>(state)\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> v + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "responses": {
                  "allEditions": [
                    {
                      "year": 2022,
                      "editionId": "rn2022",
                      "ratios": {
                        "awareness": 0.74,
                        "interest": 0.48,
                        "usage": 0.1,
                        "retention": 0.55,
                        "positivity": 0.37
                      },
                      "completion": {
                        "count": 1571,
                        "percentageSurvey": 83.21,
                        "total": 1888
                      }
                    },
                    {
                      "year": 2023,
                      "editionId": "rn2023",
                      "ratios": {
                        "awareness": 0.7,
                        "interest": 0.46,
                        "usage": 0.09,
                        "retention": 0.65,
                        "positivity": 0.34
                      },
                      "completion": {
                        "count": 1976,
                        "percentageSurvey": 82.47,
                        "total": 2396
                      }
                    },
                    {
                      "year": 2024,
                      "editionId": "rn2024",
                      "ratios": {
                        "awareness": 0.59,
                        "interest": 0.29,
                        "usage": 0.09,
                        "retention": 0.65,
                        "positivity": 0.06
                      },
                      "completion": {
                        "count": 2402,
                        "percentageSurvey": 68.59,
                        "total": 3502
                      }
                    }
                  ]
                }
              },
              {
                "id": "state_management_redux",
                "entity": {
                  "name": "Redux",
                  "nameClean": "Redux",
                  "entityType": "library",
                  "description": "A predictable state container based on unidirectional data flow and immutable state updates.",
                  "descriptionClean": "A predictable state container based on unidirectional data flow and immutable state updates.",
                  "homepage": {
                    "url": "https://redux.js.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "function reducer(state = { value: 0 }, action) {\n  switch (action.type) {\n    case 'increment':\n      return { value: state.value + 1 }\n    default:\n      return state\n  }\n}\nconst store = createStore(reducer)\n\nfunction Counter() {\n  const value = useSelector((state) => state.value)\n  const dispatch = useDispatch()\n  const increment = dispatch({ type: 'increment' })\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">reducer</span>(<span class=\"hljs-params\">state = { value: <span class=\"hljs-number\">0</span> }, action</span>) {\n  <span class=\"hljs-keyword\">switch</span> (action.<span class=\"hljs-property\">type</span>) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;increment&#x27;</span>:\n      <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">value</span>: state.<span class=\"hljs-property\">value</span> + <span class=\"hljs-number\">1</span> }\n    <span class=\"hljs-attr\">default</span>:\n      <span class=\"hljs-keyword\">return</span> state\n  }\n}\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">createStore</span>(reducer)\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">value</span>)\n  <span class=\"hljs-keyword\">const</span> dispatch = <span class=\"hljs-title function_\">useDispatch</span>()\n  <span class=\"hljs-keyword\">const</span> increment = <span class=\"hljs-title function_\">dispatch</span>({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;increment&#x27;</span> })\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "responses": {
                  "allEditions": [
                    {
                      "year": 2022,
                      "editionId": "rn2022",
                      "ratios": {
                        "awareness": 0.99,
                        "interest": 0.3,
                        "usage": 0.84,
                        "retention": 0.56,
                        "positivity": 0.52
                      },
                      "completion": {
                        "count": 1584,
                        "percentageSurvey": 83.9,
                        "total": 1888
                      }
                    },
                    {
                      "year": 2023,
                      "editionId": "rn2023",
                      "ratios": {
                        "awareness": 0.99,
                        "interest": 0.29,
                        "usage": 0.78,
                        "retention": 0.44,
                        "positivity": 0.41
                      },
                      "completion": {
                        "count": 2015,
                        "percentageSurvey": 84.1,
                        "total": 2396
                      }
                    },
                    {
                      "year": 2024,
                      "editionId": "rn2024",
                      "ratios": {
                        "awareness": 0.97,
                        "interest": 0.16,
                        "usage": 0.71,
                        "retention": 0.39,
                        "positivity": 0.12
                      },
                      "completion": {
                        "count": 2440,
                        "percentageSurvey": 69.67,
                        "total": 3502
                      }
                    }
                  ]
                }
              },
              {
                "id": "state_management_redux_toolkit",
                "entity": {
                  "name": "Redux Toolkit",
                  "nameClean": "Redux Toolkit",
                  "entityType": "library",
                  "description": "The official, opinionated, batteries-included toolset for efficient Redux development.",
                  "descriptionClean": "The official, opinionated, batteries-included toolset for efficient Redux development.",
                  "homepage": {
                    "url": "https://redux-toolkit.js.org"
                  },
                  "example": {
                    "language": "js",
                    "code": "const slice = createSlice({\n  name: 'counter',\n  initialState: { value: 0 },\n  reducers: {\n    increment: (state) => { state.value++ },\n  },\n})\n\nconst store = configureStore({ reducer: slice.reducer })\n\nfunction Counter() {\n  const value = useSelector((state) => state.value)\n  const dispatch = useDispatch()\n  const increment = () => dispatch(counterSlice.actions.increment())\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> slice = <span class=\"hljs-title function_\">createSlice</span>({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;counter&#x27;</span>,\n  <span class=\"hljs-attr\">initialState</span>: { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> },\n  <span class=\"hljs-attr\">reducers</span>: {\n    <span class=\"hljs-attr\">increment</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> { state.<span class=\"hljs-property\">value</span>++ },\n  },\n})\n\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">configureStore</span>({ <span class=\"hljs-attr\">reducer</span>: slice.<span class=\"hljs-property\">reducer</span> })\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">value</span>)\n  <span class=\"hljs-keyword\">const</span> dispatch = <span class=\"hljs-title function_\">useDispatch</span>()\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">dispatch</span>(counterSlice.<span class=\"hljs-property\">actions</span>.<span class=\"hljs-title function_\">increment</span>())\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "responses": {
                  "allEditions": [
                    {
                      "year": 2023,
                      "editionId": "rn2023",
                      "ratios": {
                        "awareness": 0.94,
                        "interest": 0.41,
                        "usage": 0.62,
                        "retention": 0.65,
                        "positivity": 0.54
                      },
                      "completion": {
                        "count": 2001,
                        "percentageSurvey": 83.51,
                        "total": 2396
                      }
                    },
                    {
                      "year": 2024,
                      "editionId": "rn2024",
                      "ratios": {
                        "awareness": 0.92,
                        "interest": 0.27,
                        "usage": 0.61,
                        "retention": 0.66,
                        "positivity": 0.18
                      },
                      "completion": {
                        "count": 2421,
                        "percentageSurvey": 69.13,
                        "total": 3502
                      }
                    }
                  ]
                }
              },
              {
                "id": "state_management_xstate",
                "entity": {
                  "name": "XState",
                  "nameClean": "XState",
                  "entityType": "library",
                  "description": "A powerful and flexible way to manage application and workflow state by allowing developers to model logic as actors and state machines.",
                  "descriptionClean": "A powerful and flexible way to manage application and workflow state by allowing developers to model logic as actors and state machines.",
                  "homepage": {
                    "url": "https://stately.ai/docs/xstate"
                  },
                  "example": {
                    "language": "js",
                    "code": "const machine = createMachine({\n  initial: 'active',\n  context: {\n    value: 0,\n  },\n  states: {\n    active: {\n      on: {\n        INCREMENT: {\n          actions: assign({\n            value: (context) => context.value + 1 })\n          }\n        }\n      }\n    }\n  }\n})\n\nfunction Counter() {\n  const [snapshot, send] = useMachine(machine)\n  const value = snapshot.context.value\n  const increment = () => send('INCREMENT')\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> machine = <span class=\"hljs-title function_\">createMachine</span>({\n  <span class=\"hljs-attr\">initial</span>: <span class=\"hljs-string\">&#x27;active&#x27;</span>,\n  <span class=\"hljs-attr\">context</span>: {\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span>,\n  },\n  <span class=\"hljs-attr\">states</span>: {\n    <span class=\"hljs-attr\">active</span>: {\n      <span class=\"hljs-attr\">on</span>: {\n        <span class=\"hljs-attr\">INCREMENT</span>: {\n          <span class=\"hljs-attr\">actions</span>: <span class=\"hljs-title function_\">assign</span>({\n            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">context</span>) =&gt;</span> context.<span class=\"hljs-property\">value</span> + <span class=\"hljs-number\">1</span> })\n          }\n        }\n      }\n    }\n  }\n})\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [snapshot, send] = <span class=\"hljs-title function_\">useMachine</span>(machine)\n  <span class=\"hljs-keyword\">const</span> value = snapshot.<span class=\"hljs-property\">context</span>.<span class=\"hljs-property\">value</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&#x27;INCREMENT&#x27;</span>)\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "responses": {
                  "allEditions": [
                    {
                      "year": 2023,
                      "editionId": "rn2023",
                      "ratios": {
                        "awareness": 0.55,
                        "interest": 0.57,
                        "usage": 0.07,
                        "retention": 0.75,
                        "positivity": 0.33
                      },
                      "completion": {
                        "count": 1969,
                        "percentageSurvey": 82.18,
                        "total": 2396
                      }
                    },
                    {
                      "year": 2024,
                      "editionId": "rn2024",
                      "ratios": {
                        "awareness": 0.44,
                        "interest": 0.47,
                        "usage": 0.08,
                        "retention": 0.59,
                        "positivity": 0.07
                      },
                      "completion": {
                        "count": 2385,
                        "percentageSurvey": 68.1,
                        "total": 3502
                      }
                    }
                  ]
                }
              },
              {
                "id": "state_management_zustand",
                "entity": {
                  "name": "Zustand",
                  "nameClean": "Zustand",
                  "entityType": "library",
                  "description": "A small, fast, and scalable bearbones state management solution that isn't boilerplatey or opinionated, but has enough convention to be explicit and flux-like.",
                  "descriptionClean": "A small, fast, and scalable bearbones state management solution that isn't boilerplatey or opinionated, but has enough convention to be explicit and flux-like.",
                  "descriptionHtml": "A small, fast, and scalable bearbones state management solution that isn't boilerplatey or opinionated, but has enough convention to be explicit and flux-like.",
                  "homepage": {
                    "url": "https://zustand-demo.pmnd.rs"
                  },
                  "example": {
                    "language": "js",
                    "code": "const useStore = create((set) => ({\n  count: 0,\n  increment: () => set((state) => ({ count: state.count + 1 })),\n}))\n\nfunction Counter() {\n  const { count, increment } = useStore()\n  // ...\n}\n",
                    "codeHighlighted": "<span class=\"hljs-keyword\">const</span> useStore = <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">set</span>) =&gt;</span> ({\n  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attr\">increment</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> ({ <span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span> })),\n}))\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> { count, increment } = <span class=\"hljs-title function_\">useStore</span>()\n  <span class=\"hljs-comment\">// ...</span>\n}"
                  }
                },
                "responses": {
                  "allEditions": [
                    {
                      "year": 2022,
                      "editionId": "rn2022",
                      "ratios": {
                        "awareness": 0.69,
                        "interest": 0.67,
                        "usage": 0.21,
                        "retention": 0.94,
                        "positivity": 0.52
                      },
                      "completion": {
                        "count": 1577,
                        "percentageSurvey": 83.53,
                        "total": 1888
                      }
                    },
                    {
                      "year": 2023,
                      "editionId": "rn2023",
                      "ratios": {
                        "awareness": 0.81,
                        "interest": 0.72,
                        "usage": 0.36,
                        "retention": 0.93,
                        "positivity": 0.66
                      },
                      "completion": {
                        "count": 1996,
                        "percentageSurvey": 83.31,
                        "total": 2396
                      }
                    },
                    {
                      "year": 2024,
                      "editionId": "rn2024",
                      "ratios": {
                        "awareness": 0.85,
                        "interest": 0.79,
                        "usage": 0.46,
                        "retention": 0.95,
                        "positivity": 0.29
                      },
                      "completion": {
                        "count": 2413,
                        "percentageSurvey": 68.9,
                        "total": 3502
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  }
}